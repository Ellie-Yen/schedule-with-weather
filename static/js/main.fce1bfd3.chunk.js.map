{"version":3,"sources":["libs/responseConstructors.ts","libs/dateHelpers.ts","libs/statusConstructors.ts","service/calendarDataReducer.ts","libs/calendarDataConverters.ts","libs/calendarAPIFetchers.ts","libs/weatherAPIFetchers.ts","libs/weatherDataConverters.ts","service/weather3DayDataReducer.ts","service/weatherWeekDataReducer.ts","service/stateControllers.ts","components/appStyleWrappers.tsx","components/IconElements.tsx","components/Loader.tsx","components/DecoBackground.tsx","components/StateComponents.tsx","components/Card.tsx","components/ButtonComponent.tsx","libs/componentEffects.ts","components/SlideShowWrapper.tsx","sections/Weather3DaySection.tsx","components/ChartComponent.tsx","libs/chartHelpers.ts","sections/WeatherWeekSection.tsx","sections/ScheduleSection.tsx","components/SwitchShowElement.tsx","components/MenuWrapper.tsx","components/MyFormElements.tsx","sections/SettingSection.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["exception","error","Error","failed","message","name","Response","status","statusText","tmp","result","code","error2","MSG_MAP","unknown_failed","error_msg","is_success","reason","successFetchCalendarAPI","response","successFetchEventList","event_list","is_example","successFetchWeatherAPI","data","DAY_SEC","checkIsNight","t","hr","getHours","getDateInWeatherAPI","api_time_obj","Date","getDateInCalenderAPI","time_str","date","dateTime","getWeekListIdx","date_obj","current_week_date_list","d","getDate","toStart","toEnd","Math","abs","getCurrentWeekDateList","time_stamp","now","res","day","push","toDisplayDateList","cur_week","map","daytime","SimpFormat","format","DetailFormat","Intl","DateTimeFormat","month","minute","hour","hourCycle","weekday","TimeFormat","getDuration","start_date","end_date","start","end","valueOf","initStatus","loadingStatus","failedStatus","successStatus","calendarDataReducer","init","fakeEventList","init_schedule","loading","fetched","fetch_result","example_duration","date_to_fit","EXAMPLE","i","length","duration","replaceAll","parseExample","content","sort","a","b","Array","forEach","eventItem","start_idx","end_idx","event_info","summary","location","link","htmlLink","parseCalendar","noEvent","failedData","successData","failed_result","msg","fill","fakeEvent","summary_text","url","no_event_date","empty_schedule","getFullYear","getMonth","year","API","user_calendar_base_url","getCalendarLinkByDate","gapi","window","kwargs","Promise","resolve","asyncFetchHelper","asyncExecute","use_example_data","load","initGAPI","api_key","eventListPage","undefined","asyncFetchEventList","eventListRes","eventList","items","eventPage","asyncFetchEvent","id","eventRes","eventDetail","concat","nextPageToken","client","setApiKey","asyncGAPIRequest","request","getEventListRequestURL","event_id","getEventRequestURL","calendar_id","time_max","time_min","page_params","query_params","base_url","asyncFetchCalendar","asyncFetchWeather_3day","getFetchURL","requestAndFetch","asyncFetchWeather_week","myRequest","Request","fetch","ok","json","success","getCityCode","city","time_span","city_root","WEATHER_CITY_MAP","city_data","cityCode_for_calc","code_3day","city_baseCode","String","padStart","AUTH_PART","authorization_key","cityCode","fields","fetch_fields","query_option","town","emptyWeather12HItemInfo","POP","parse_func_map","Wx","elementList","time","item","startTime","endTime","is_night","weather","elementValue","value","CI","temperature","feeling","RH","getStrWE","PoP12h","PoP6h","val","MinT","parseNumWE","MaxT","getWeatherElementLists","weatherList","records","locations","weatherElement","elementName","parseFloat","weather3DayDataReducer","fakeData","init_weather","weatherLists","wx","rh","ci","pop6h","pop_idx","feel","parseWeather3Day","weatherWeekDataReducer","minT","maxT","pop","weather_list","minTList","maxTList","night","min","max","parseWeatherWeek","RenderDataState","props","React","useState","reducer","state","setStatus","useEffect","fetchFunc","update","getCenterAlignCss","alignItems","justifyContent","gap","getVerticalFlexCss","flexGrow","getHorizonalFlexCss","BigRoundCss","css","SmallRoundCss","CircleSideCss","ShadowCss","CircleCss","RowDiv","styled","div","ColDiv","GridDiv","row","col","getGridCss","RowInGridDiv","gridArea","CenterTitle","h1","IconLabeledElement","SmallIcon","className","icon_cls_name","BigIcon","Big3DIcon","Loader","r","radius","w","DecoBackground","DecoBackgroundDiv","DecoImg","src","img_url","alt","img","WeatherDisplayReducer","args","ICON_MAP","empty","getWeatherIconClsName","SpecialWeatherDisplayReducer","WeatherPicReducer","getWeatherPicUrl","defaultWeatherArgs","icons","WEATHER_ICON_MAP","pics","WEATHER_PIC_MAP","VerticalFlexRoundCard","GeneralCardCss","BigGridRoundCard","LeftBorderCard","CircleSideButton","CircleSideBtn","disabled","is_disabled","is_primary","onClick","func","IconCircleButton","CircleBtn","IconTitledButton","Btn","button","makeAnimate","effect_func","elapsed","requestAnimationFrame","makeEffect","timestamp","GetClipPath","SlideShowWrapper","ref_for_effect","useRef","changePage","change_amount","ref_obj","new_page","page","max_page","setTimeout","setPage","current","style","opacity","transform","ref","children","prev_page","next_page","Weather3DaySection","p","Weather3DayPic","item_info","Weather3DayCard","CONTENT_MAP","weather_3day","temperature_unit","title","ChartComponent","x_coords","split_number","x_unit","getXCoords","x_labels","y_coords_list","val_lists","y_coords","flat","minY","maxY","getYPos","getYposFunctionBuilder","vals","getListOfYCoords","vals_lists","y_labels_list","unit_list","ChartContainer","ChartLabelComponent","ChartBody","ChartLabelContainer","x_label","ChartLabelAtX","y_labels","ColAtX","label","ChartLabel","top","MySvg","xmlns","LineGroup","Lines","prevX","prevY","LineAndMarker","x1","y1","x2","y2","MyLineGroup","attributeName","attributeType","type","from","to","begin","dur","repeatCount","MyLine","MyCircle","cx","cy","svg","g","line","circle","WeatherWeekSection","weather_week","display_week","ScheduleSection","WeatherOfDay","weatherState","EventOfDay","calendarState","k","SingleEvent","open","DisplayController","is_hide","setHide","ref_content","stopEvent","event","preventDefault","stopPropagation","nativeEvent","stopImmediatePropagation","switchDisplay","clipPath","delta","hideContentEffect","DynamicContentContainer","hidden","MenuWrapper","MenuBoard","ContentContainer","MyForm","formRef","question","Board","MyFormWrapper","checked","reportValidity","submit_func","canceled","cancel_func","PasswordInputComponent","hidePassword","setHidePassword","setMsg","refInput","validationMessage","password_is_hide","password_is_show","inputType","statusIcon","InputSection","IconContainer","MyInput","onChange","target","setValue","required","SelectInputComponent","HiddenSelectElement","option_list","DummySelectElement","ToggleCheckComponent","MyCheckBox","msg_checked","MyFieldSet","htmlFor","refSelect","focus","HiddenSelect","op","selectItem","DummySelect","extend_content","fold_content","ContentBoard","FormElementCSS","form","input","select","fieldset","SettingSection","setting","WeatherParamSetSection","weatherParam","setWeatherParam","CalendarParamSetSection","calendarParam","setCalendarParam","setCity","setTown","setting_weather","select_city_label","newCity","CITY_MAP","cities","select_town_label","town_list","setAPIKey","setCalendarID","setUseEx","toISOString","setting_calendar","calendar_source_label","calendar_source_msg_checked","calendar_api_key","calendar_api_key_label","calendar_id_label","App","timeState","setTimeState","new_cur_week","useTimeState","refresh","weather3DayState","weatherWeekState","getWeatherWeekState","getCalendarState","Forecast3Day","useMemo","ForecastWeek","Schedule","Setting","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fce1bfd3.chunk.js","sourcesContent":["import { default as MSG_MAP } from '../datastore/app_msg_map.json';\r\n\r\n/**\r\n * handle no result success\r\n */\r\nexport function success(): SuccessRes {\r\n  return {\r\n    is_success: true\r\n  };\r\n}\r\n\r\n/**\r\n * handle exception errors in [try - catch]\r\n * @param error any unknown type\r\n */\r\nexport function exception(error: unknown): FailedRes{\r\n  if (error instanceof Error){\r\n    return failed(`${error.message} ${error.name}`);\r\n  }\r\n  if (error instanceof Response){\r\n    return failed(`${error.status} ${error.statusText}`);\r\n  }\r\n\r\n  // handle fetching error for gapi\r\n  try {\r\n    const tmp = (error as gapi.client.HttpRequestRejected).result.error;\r\n    return failed(`${tmp.code}, ${tmp.message}`);\r\n  }\r\n  catch (error2){\r\n  }\r\n  return failed(MSG_MAP.unknown_failed);\r\n}\r\n\r\n/**\r\n * @param error_msg string represents the reason why error happened\r\n * @returns FailedRes\r\n */\r\nexport function failed(error_msg: string): FailedRes {\r\n  return {\r\n    is_success: false,\r\n    reason: `${MSG_MAP.failed}: ${error_msg}`\r\n  }\r\n}\r\n\r\n/**\r\n * used in get response from gapi\r\n * @param response request result, CalendarAPIRes\r\n */\r\nexport function successFetchCalendarAPI(response: CalendarAPIRes): SuccessCalendarAPIRes{\r\n  return {\r\n    is_success: true,\r\n    result: response\r\n  }\r\n}\r\n\r\n/**\r\n * this also used in calendar api, as the final out put. (after several fetchings)\r\n * @param event_list Array<EventResource>, unproccessed events of this week\r\n */\r\nexport function successFetchEventList(event_list: Array<EventResource>): SuccessFetchEventListRes{\r\n  return {\r\n    is_success: true,\r\n    result: {\r\n      is_example: false,\r\n      event_list\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * this used when we choose to show example calendar data \r\n */\r\n export function successExampleData(): SuccessFetchEventListRes {\r\n  return {\r\n    is_success: true,\r\n    result: {\r\n      is_example: true,\r\n      event_list: []\r\n    }\r\n  };\r\n}\r\n\r\nexport function successFetchWeatherAPI(data: SuccessWeatherAPI_3day | SuccessWeatherAPI_week): SuccessWeatherAPIRes {\r\n  return {\r\n    is_success: true,\r\n    result: data\r\n  };\r\n}\r\n\r\n","const DAY_SEC = 86400000;\r\n\r\n/**\r\n * return true if time is night (18: 00 ~ 6: 00) else false.\r\n * @param t : Date\r\n */\r\nfunction checkIsNight(t: Date): boolean {\r\n  const hr = t.getHours();\r\n  return hr >= 18 || hr < 6;\r\n}\r\n\r\n/**\r\n * the time format is a datetime string represents in taiwan local time\r\n * , this function helps converting them to date.\r\n * @param api_time_obj: string.\r\n * @return Date\r\n */\r\nfunction getDateInWeatherAPI(api_time_obj: string): Date {\r\n  return new Date(api_time_obj + ' +08:00'); // timezone Asia/Taipei\r\n}\r\n\r\n/**\r\n * the time format is different between whole-day/ not-whole-day events\r\n * , this function helps converting them to date.\r\n * @param api_time_obj: an object contains strings represents time\r\n * ,see APITime.\r\n * @return Date\r\n */\r\n function getDateInCalenderAPI(api_time_obj: APITime): Date{\r\n  const time_str: string = \r\n    api_time_obj.date ||\r\n    api_time_obj.dateTime\r\n  ;\r\n  return new Date(time_str);\r\n}\r\n\r\n/**\r\n * @param date_obj Date to get the index\r\n * @param current_week_date_list Array<Date>, as a reference to get index.\r\n * @returns a int as index, represent date_obj is on nth day later from now.\r\n * range n is from 0 ~ 6 (relative position in the week). \r\n */\r\nfunction getWeekListIdx(date_obj: Date, current_week_date_list: Array<Date>): number{\r\n  // the result of getDay() will be different by hours thus leads to error.\r\n  // in order to fix that, use the difference of date time.\r\n  const d = date_obj.getDate();\r\n  const toStart =  d - current_week_date_list[0].getDate();\r\n  const toEnd = current_week_date_list[6].getDate() - d;\r\n\r\n  // handling situation of that start and end are in differenet months.\r\n  if (Math.abs(toStart) > Math.abs(toEnd)){\r\n    return 6 - toEnd;\r\n  }\r\n  return toStart;\r\n}\r\n\r\nfunction getCurrentWeekDateList(): Array<Date>{\r\n  let time_stamp = Date.now();\r\n  const res: Array<Date> = [new Date(time_stamp)];\r\n  for (let day = 1; day < 7; day ++){\r\n    time_stamp += DAY_SEC;\r\n    res.push(new Date(time_stamp));\r\n  }\r\n  return res;\r\n}\r\n\r\n/**\r\n * helps turn cur_week into display format for rendering.\r\n * @param cur_week Array<Date> of currrent week.\r\n * @returns Array<string> of current week.\r\n */\r\nexport function toDisplayDateList(cur_week: Array<Date>){\r\n  return cur_week.map(daytime => SimpFormat.format(daytime));\r\n}\r\n\r\nconst DetailFormat = new Intl.DateTimeFormat([], {\r\n  day: \"2-digit\",\r\n  month: \"2-digit\",\r\n  minute: \"2-digit\",\r\n  hour: \"2-digit\",\r\n  hourCycle: 'h24',\r\n  weekday: \"narrow\"\r\n});\r\n\r\nconst SimpFormat = new Intl.DateTimeFormat([], {\r\n  day: \"2-digit\",\r\n  month: \"2-digit\",\r\n  weekday: \"narrow\"\r\n});\r\n\r\nconst TimeFormat = new Intl.DateTimeFormat([], {\r\n  minute: \"2-digit\",\r\n  hour: \"2-digit\",\r\n  hourCycle: 'h24'\r\n});\r\n\r\n\r\nfunction getDuration(start_date: Date, end_date: Date): string {\r\n  const start = DetailFormat.format(start_date);\r\n  const end = (start_date.getDate() === end_date.getDate() &&\r\n    end_date.valueOf() - start_date.valueOf() < DAY_SEC) ?\r\n    TimeFormat.format(end_date):\r\n    DetailFormat.format(end_date);\r\n\r\n  return `${start} ~ ${end}`;\r\n}\r\n\r\nfunction getExampleDuration(example_duration: string, date_to_fit: Date): string{\r\n  return example_duration.replaceAll('t', SimpFormat.format(date_to_fit));\r\n}\r\n\r\nexport {getCurrentWeekDateList, getWeekListIdx, checkIsNight, getDateInWeatherAPI\r\n  ,getDuration, getExampleDuration, getDateInCalenderAPI\r\n}","/**\r\n * used in parse/ dataReducer, indicate the fetch status and data for rendering\r\n */\r\n\r\nexport function initStatus(data: any): {status: 'init', data: typeof data}{\r\n  return {\r\n    status: 'init',\r\n    data\r\n  }\r\n}\r\n\r\nexport function loadingStatus(data: any): {status: 'loading', data: typeof data}{\r\n  return {\r\n    status: 'loading',\r\n    data\r\n  }\r\n}\r\n\r\nexport function failedStatus(data: any): {status: 'failed', data: typeof data}{\r\n  return {\r\n    status: 'failed',\r\n    data\r\n  }\r\n}\r\n\r\nexport function successStatus(data: any): {status: 'success', data: typeof data}{\r\n  return {\r\n    status: 'success',\r\n    data\r\n  }\r\n}","import {exception} from '../libs/responseConstructors';\r\nimport { \r\n  parseCalendar, parseExample, getCalendarLinkByDate\r\n} from '../libs/calendarDataConverters';\r\nimport { \r\n  loadingStatus, initStatus, failedStatus\r\n} from '../libs/statusConstructors';\r\n\r\nimport {default as MSG_MAP} from '../datastore/app_msg_map.json';\r\n\r\n/**\r\n * get data used in rendering WeekCalendarComponents by state\r\n */\r\nexport const calendarDataReducer: CalendarReducer = {\r\n  init: initData,\r\n  loading: loadingData,\r\n  fetched: getDataFromFetchResult\r\n}\r\n\r\nfunction getDataFromFetchResult(fetch_result: SuccessFetchEventListRes | FailedRes, cur_week: Array<Date>): SuccessCalendarState | FailedCalendarState {\r\n  try{\r\n    if (fetch_result.is_success){\r\n      return successData(fetch_result, cur_week);\r\n    }\r\n    return failedData(fetch_result, cur_week);\r\n  }\r\n  catch (error){\r\n    return failedData(exception(error), cur_week);\r\n  }\r\n}\r\n\r\nfunction successData(fetch_result: SuccessFetchEventListRes, cur_week: Array<Date>): SuccessCalendarState | FailedState {\r\n  try{\r\n    if (fetch_result.result.is_example){\r\n      return parseExample(cur_week);\r\n    }\r\n\r\n    const res = parseCalendar(fetch_result, cur_week);\r\n\r\n    for (let day = 0; day < 7; day ++){\r\n\r\n      // if no event, add a link to add event\r\n      if (res.data.event_list[day].length === 0){\r\n        res.data.event_list[day] = [noEvent(cur_week[day])];\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n  catch (error){\r\n    return failedData(exception(error), cur_week);\r\n  }\r\n}\r\n\r\nfunction failedData(failed_result: FailedRes, cur_week: Array<Date>): FailedCalendarState {\r\n  return failedStatus({\r\n    is_example: false,\r\n    event_list: fakeEventList(failed_result.reason)\r\n  });\r\n}\r\n\r\nfunction initData(): InitCalendarState {\r\n  return initStatus({\r\n    is_example: false,\r\n    event_list: fakeEventList(MSG_MAP.init_schedule)\r\n  });\r\n}\r\n\r\nfunction loadingData(): LoadingCalendarState {\r\n  return loadingStatus({\r\n    is_example: false,\r\n    event_list: fakeEventList(MSG_MAP.loading)\r\n  });\r\n}\r\n\r\n/**\r\n * used in loading, failed, init state as spaceholder\r\n * @param msg string to show as summary\r\n */\r\nfunction fakeEventList(msg: string): Array<Array<EventInfo>>{\r\n  const event_list: Array<Array<EventInfo>> = new Array(7);\r\n  event_list.fill([fakeEvent(msg)]);\r\n  return event_list;\r\n}\r\n\r\nfunction fakeEvent(summary_text: string, url: string = ''): EventInfo{\r\n  return {\r\n    summary: summary_text,\r\n    location: '-',\r\n    link: url,\r\n    duration: '-'\r\n  }\r\n}\r\n\r\n/**\r\n * @param no_event_date Date that has 0 event\r\n * @returns a EventInfo that has a hint and link to add event\r\n */\r\nfunction noEvent(no_event_date: Date): EventInfo{\r\n  return fakeEvent(\r\n    MSG_MAP.empty_schedule, \r\n    getCalendarLinkByDate(no_event_date)\r\n  );\r\n}","import {\r\n  getWeekListIdx, getDuration, getExampleDuration, getDateInCalenderAPI\r\n} from './dateHelpers';\r\nimport { successStatus } from './statusConstructors';\r\nimport {default as API} from '../datastore/google_calendar_api_info.json';\r\nimport {default as EXAMPLE} from '../datastore/calendar_example.json';\r\n\r\nexport function parseCalendar(fetch_result: SuccessFetchEventListRes, cur_week: Array<Date>): SuccessCalendarState {\r\n  const content = fetch_result.result;\r\n\r\n  // sort by start time\r\n  content.event_list.sort(((a: EventResource, b: EventResource) => \r\n    a.start - b.start\r\n  ));\r\n\r\n  let event_list: Array<Array<EventInfo>> = new Array(7);\r\n  for (let day = 0; day < 7; day ++){\r\n    event_list[day] = [];\r\n  }\r\n\r\n  content.event_list.forEach(eventItem => {\r\n    const start_date = getDateInCalenderAPI(eventItem.start);\r\n    const end_date = getDateInCalenderAPI(eventItem.end);\r\n\r\n    const start_idx = getWeekListIdx(start_date, cur_week);\r\n    const end_idx = getWeekListIdx(end_date, cur_week);\r\n\r\n    // fill the week by events \r\n    for (let i = start_idx; i <= end_idx; i++){\r\n      const event_info: EventInfo = {\r\n        summary: eventItem.summary,\r\n        location: eventItem.location || 'not set yet',\r\n        link: eventItem.htmlLink,\r\n        duration: getDuration(start_date, end_date)\r\n      }\r\n      event_list[i].push(event_info)\r\n    }\r\n  });\r\n\r\n  return successStatus({\r\n    is_example: false,\r\n    event_list\r\n  })\r\n}\r\n\r\nexport function parseExample(cur_week: Array<Date>): SuccessCalendarState {\r\n  const event_list = EXAMPLE.event_list;\r\n  for (let day = 0; day < 7; day++){\r\n    for (let i = 0; i < event_list[day].length; i++){\r\n      event_list[day][i].duration = \r\n      getExampleDuration(event_list[day][i].duration, cur_week[day])\r\n    }\r\n  }\r\n  return successStatus({\r\n    is_example: true,\r\n    event_list\r\n  });\r\n}\r\n\r\n/**\r\n* @param t Date that has 0 event\r\n* @returns a link to add event\r\n*/\r\nexport function getCalendarLinkByDate(t: Date){\r\n const [year, month, date] = [t.getFullYear(), t.getMonth() + 1, t.getDate()];\r\n return `${API.user_calendar_base_url}${year}/${month}/${date}`;\r\n}","import {default as API} from '../datastore/google_calendar_api_info.json';\r\nimport { \r\n  exception, success, \r\n  successFetchCalendarAPI, successFetchEventList, successExampleData\r\n} from './responseConstructors';\r\n\r\nconst gapi = window.gapi; // don't forget to include gapi script in index.html\r\n\r\n/**\r\n * Fetch user's events in his calendar,\r\n * for this app, we fetch the events of the current week.\r\n * ref: https://developers.google.com/calendar/api/guides/overview\r\n * @param kwargs : CalendarParam, contains following:\r\n * - use_exmaple_data: boolean, indicates the source to use.\r\n * - api_key: str to use google api\r\n * - calendar_id: str, id of fetching calendar\r\n * - time_min, time_max: str, range of time that we want to fetch event list\r\n * @returns a Promise conatins success fetched eventlists or a failed resaon.\r\n */\r\nasync function asyncFetchCalendar(kwargs: CalendarParam): Promise<FailedRes | SuccessFetchEventListRes>{\r\n  // always return a resolved promise\r\n  return new Promise((resolve)=>{\r\n    try {\r\n      if (kwargs.use_example_data){\r\n        resolve(successExampleData());\r\n        return;\r\n      }\r\n      async function asyncFetchHelper() {\r\n        const res = await asyncExecute(kwargs);\r\n        resolve(res);\r\n      }\r\n      gapi.load('client', asyncFetchHelper);\r\n    }\r\n    catch (error){\r\n      resolve(exception(error));\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * the main function of whole process, includes init and fetch.\r\n * @param kwargs CalendarParam contains following:\r\n * - use_exmaple_data: boolean, indicates the source to use.\r\n * - api_key: str to use google api\r\n * - calendar_id: str, id of fetching calendar\r\n * - time_min, time_max: str, range of time that we want to fetch event list\r\n */\r\nasync function asyncExecute(kwargs: CalendarParam): Promise<FailedRes | SuccessFetchEventListRes>{\r\n  try {\r\n    const init = initGAPI(kwargs.api_key);\r\n    if (! init.is_success){\r\n      return init;\r\n    }\r\n    // for each event_list, fetch all holding periods of each event on the list\r\n    // the result of even_list and event periods are paginated. \r\n    let result: Array<EventResource> = [];\r\n    let eventListPage = \"\";\r\n    while (eventListPage !== undefined){\r\n      const eventListRes = await asyncFetchEventList(kwargs, eventListPage);\r\n      if (! eventListRes.is_success){\r\n        return eventListRes;\r\n      }\r\n      const eventList: CalendarAPIContent = eventListRes.result.result;\r\n      for (let eventItem of eventList.items){\r\n        let eventPage = \"\";\r\n        while (eventPage !== undefined){\r\n          const eventRes = await asyncFetchEvent(kwargs, eventItem.id, eventPage);\r\n          if (! eventRes.is_success){\r\n            return eventRes;\r\n          }\r\n          const eventDetail: CalendarAPIContent = eventRes.result.result;\r\n          result = result.concat(eventDetail.items);\r\n          eventPage = eventDetail.nextPageToken;\r\n        }\r\n      }\r\n      eventListPage = eventList.nextPageToken;\r\n    }\r\n    return successFetchEventList(result);\r\n  }\r\n  catch (error: unknown){\r\n    return exception(error);\r\n  }\r\n}\r\n/**\r\n * the function to init google api\r\n * @param api_key : string\r\n */\r\nfunction initGAPI(api_key: string): SuccessRes | FailedRes {\r\n  try {\r\n    gapi.client.setApiKey(api_key);\r\n    return success();\r\n  }\r\n  catch (error) {\r\n    return exception(error);\r\n  }\r\n}\r\n\r\n/**\r\n * helps make a client-side request to google api. \r\n * @param url the url address to make a request.\r\n */\r\nasync function asyncGAPIRequest(url: string): Promise<SuccessCalendarAPIRes | FailedRes>{\r\n  try {\r\n    const res = await gapi.client.request({\r\n      'path': url,\r\n    });\r\n    return successFetchCalendarAPI(res);\r\n  }\r\n  catch (error) {\r\n    return exception(error);\r\n  } \r\n}\r\n\r\n/**\r\n * helps to fetch event_list on page x.\r\n * @param kwargs CalendarParam\r\n * @param nextPageToken string, a gapi provided token to get next page result.\r\n */\r\nasync function asyncFetchEventList(kwargs: CalendarParam, nextPageToken: string = \"\"){\r\n  return await asyncGAPIRequest(getEventListRequestURL(kwargs, nextPageToken));\r\n}\r\n\r\n/**\r\n * helps to fetch all periods of event whose id is event_id on page x.\r\n * @param kwargs CalendarParam\r\n * @param event_id string, an id represents the event of fetching.\r\n * @param nextPageToken string, a gapi provided token to get next page result.\r\n */\r\nasync function asyncFetchEvent(kwargs: CalendarParam, event_id: string, nextPageToken: string = \"\"){\r\n  return await asyncGAPIRequest(getEventRequestURL(kwargs, event_id, nextPageToken));\r\n}\r\n\r\n/**\r\n * return an url that can fetch event_list on page x.\r\n * @param kwargs CalendarParam\r\n * @param nextPageToken string, a gapi provided token to get next page result.\r\n */\r\nfunction getEventListRequestURL(kwargs: CalendarParam, nextPageToken: string = \"\"): string {\r\n  const {calendar_id, time_max, time_min} = kwargs;\r\n  const page_params = nextPageToken === ''?\r\n    `pageToken=${nextPageToken}&`: '';\r\n  const query_params = `timeMax=${time_max}&timeMin=${time_min}`\r\n  const res = `${API.base_url}${calendar_id}/events?${page_params}${query_params}`;\r\n  return res;\r\n}\r\n\r\n/**\r\n * return an url that can fetch periods of an event whose id is event_id on page x.\r\n * @param kwargs CalendarParam\r\n * @param event_id string, an id represents the event of fetching.\r\n * @param nextPageToken string, a gapi provided token to get next page result.\r\n */\r\nfunction getEventRequestURL(kwargs: CalendarParam, event_id: string, nextPageToken: string = \"\"): string{\r\n  const {calendar_id, time_max, time_min} = kwargs;\r\n  const page_params = nextPageToken === ''?\r\n    `pageToken=${nextPageToken}&`: '';\r\n  const query_params = `timeMax=${time_max}&timeMin=${time_min}`\r\n  const res = `${API.base_url}${calendar_id}/events/${event_id}/instances?${page_params}${query_params}`;\r\n  return res;\r\n}\r\n\r\nexport default asyncFetchCalendar;","import { failed, exception, successFetchWeatherAPI } from './responseConstructors';\r\n\r\nimport {default as API} from '../datastore/weather_api_info.json';\r\nimport {default as WEATHER_CITY_MAP} from '../datastore/weather_city_map.json';\r\n// fetching Weather data\r\n// all encoding is based on weather api(v1)\r\n\r\n/**\r\n * fetch 3 day forecast of this location.\r\n * @param location: WeatherParam contains:\r\n * - city str of city name\r\n * - town str of town name\r\n * @returns a json conatins SuccessWeatherAPI_3day if success,\r\n * else a FailedRes\r\n */\r\n export async function asyncFetchWeather_3day(location: WeatherParam): Promise<FailedRes | SuccessWeatherAPIRes>{\r\n  const url = getFetchURL(location, 3);\r\n  if (! url){\r\n    return failed('invalid location');\r\n  }\r\n  return await requestAndFetch(url);\r\n}\r\n\r\n/**\r\n * fetch week forecast of this location.\r\n * @param city str of city name\r\n * @param town str of town name\r\n * @returns a json conatins SuccessWeatherAPI_week if success,\r\n * else a FailedRes\r\n */\r\nexport async function asyncFetchWeather_week(location: WeatherParam): Promise<FailedRes | SuccessWeatherAPIRes>{\r\n  const url = getFetchURL(location, 7);\r\n  if (! url){\r\n    return failed('invalid location');\r\n  }\r\n  return await requestAndFetch(url);\r\n}\r\n\r\n/**\r\n * \r\n * @param url: string, the url of api to request\r\n * @returns a json conatins SuccessWeatherAPI_3day / SuccessWeatherAPI_week if success,\r\n * else a FailedRes\r\n */\r\nasync function requestAndFetch(url: string): Promise<SuccessWeatherAPIRes | FailedRes>{\r\n  try {\r\n    const myRequest = new Request(url);\r\n    const res = await fetch(myRequest);\r\n    if ( ! res.ok){\r\n      return exception(res);\r\n    }\r\n    const data = await res.json();\r\n\r\n    // sometimes http status is fine but get error\r\n    const error_msg = (data as FailedWeatherAPI).message;\r\n    if (error_msg){\r\n      return failed(`failed to fetch, ${error_msg}`);\r\n    }\r\n    if (! data.success){\r\n      return failed(`failed to fetch, unknown api status`);\r\n    }\r\n    return successFetchWeatherAPI(data);\r\n  }\r\n  catch (error){\r\n    return exception(error);\r\n  }\r\n}\r\n\r\n/**\r\n @returns a code used for url in fetching weather api\r\n * or undefined if the city is not on the list.\r\n @param city string of name.\r\n @param time_span int, represents the time_span of forecast,\r\n * acceptable values are 3 and 7.\r\n*/\r\nfunction getCityCode(city: string, time_span: number = 3): string | undefined {\r\n  type citykey = keyof typeof WEATHER_CITY_MAP.city_data;\r\n  const city_root = WEATHER_CITY_MAP.city_data[city as citykey];\r\n  if (! city_root){\r\n    return ;\r\n  }\r\n  let cityCode_for_calc = city_root.code_3day;\r\n  if (time_span === 7){\r\n    cityCode_for_calc += 2;\r\n  }\r\n  return WEATHER_CITY_MAP.city_baseCode + String(cityCode_for_calc).padStart(3, \"0\");\r\n}\r\n\r\n/**\r\n @returns an url in fetching weather api\r\n * or undefined if the city is not on the list.\r\n @param location: WeatherParam contains:\r\n * - city str of city name\r\n * - town str of town name\r\n @param time_span int, represents the time_span of forecast,\r\n * acceptable values are 3 and 7.\r\n*/\r\nfunction getFetchURL(location: WeatherParam, time_span: number = 3): string | undefined {\r\n  const AUTH_PART = `Authorization=${API.authorization_key}`;\r\n\r\n  const cityCode = getCityCode(location.city, time_span);\r\n  if (! cityCode){\r\n    return;\r\n  }\r\n\r\n  type field_key = keyof typeof WEATHER_CITY_MAP.fetch_fields;\r\n  const code = String(time_span);\r\n  const fields = WEATHER_CITY_MAP.fetch_fields[code as field_key];\r\n  const query_option = `locationName=${location.town}&elementName=${fields}&sort=time`;\r\n  return `${API.base_url}${cityCode}?${query_option}&${AUTH_PART}`;\r\n}\r\n","import { \r\n  getDuration, getDateInWeatherAPI, \r\n  checkIsNight, getWeekListIdx \r\n} from \"./dateHelpers\";\r\nimport { successStatus } from './statusConstructors';\r\n\r\nexport function parseWeather3Day(fetch_result: SuccessWeatherAPIRes): SuccessWeather3DayState{\r\n  const weatherLists = getWeatherElementLists(fetch_result);\r\n  const wx = weatherLists.Wx;\r\n  const rh = weatherLists.RH;\r\n  const ci = weatherLists.CI;\r\n  const pop6h = weatherLists.PoP6h;\r\n  const data = new Array<Weather3DayItemInfo>(wx.length);\r\n  let pop_idx = 0; // other item is listed per 3 hr, but pop is per 6 hr\r\n\r\n  for (let i = 0; i < wx.length; i++){\r\n    if (pop_idx + 1 < wx.length &&\r\n      wx[i].start === pop6h[pop_idx + 1].start){\r\n      pop_idx += 1;\r\n    }\r\n    data[i] = {\r\n      duration: wx[i].duration,\r\n      is_night: wx[i].is_night,\r\n      weather: wx[i].weather,\r\n      code: wx[i].code,\r\n      temperature: ci[i].temperature,\r\n      feel: ci[i].feeling,\r\n      RH: rh[i],\r\n      POP: pop6h[pop_idx].val\r\n    }\r\n  } \r\n  return successStatus(data);\r\n}\r\n\r\nexport function parseWeatherWeek(fetch_result: SuccessWeatherAPIRes, cur_week: Array<Date>): SuccessWeatherWeekState{\r\n  const weatherLists = getWeatherElementLists(fetch_result);\r\n  const wx = weatherLists.Wx;\r\n  const minT = weatherLists.MinT;\r\n  const maxT = weatherLists.MaxT;\r\n  const pop = weatherLists.PoP12h;\r\n\r\n  const weather_list = new Array<WeatherWeekItemInfo>(7);\r\n  const minTList = new Array<number>(7);\r\n  const maxTList = new Array<number>(7);\r\n\r\n  let day = getWeekListIdx(wx[0].start, cur_week);\r\n\r\n  for (let i = 0; i < wx.length; i++){\r\n    \r\n    // handle temperature (minT/ maxT/ range) and add new item \r\n    if (minTList[day] === undefined){\r\n      minTList[day] = minT[i];\r\n      maxTList[day] = maxT[i];\r\n\r\n      weather_list[day] = {\r\n        day: emptyWeather12HItemInfo,\r\n        night: emptyWeather12HItemInfo\r\n      };\r\n    }\r\n    else {\r\n      minTList[day] = Math.min(minT[i], minTList[day]);\r\n      maxTList[day] = Math.max(maxT[i], maxTList[day]);\r\n    }\r\n\r\n    // ensure time span and add weather\r\n    if (wx[i].is_night){\r\n      weather_list[day].night = {\r\n        code: wx[i].code,\r\n        POP: pop[i]\r\n      };\r\n      day ++;\r\n      continue;\r\n    }\r\n    \r\n    weather_list[day].day = {\r\n      code: wx[i].code,\r\n      POP: pop[i]\r\n    };\r\n  }  \r\n  return successStatus({\r\n    weather_list,\r\n    temperature: {\r\n      minT: minTList,\r\n      maxT: maxTList\r\n    }\r\n  });\r\n}\r\n\r\nconst emptyWeather12HItemInfo: Weather12HItemInfo = {\r\n  code: '00',\r\n  POP: '-'\r\n}\r\n\r\ntype WeatherElementLists = {\r\n  Wx: Array<WxData>,\r\n  CI: Array<CIData>,\r\n  RH: Array<string>,\r\n  PoP12h: Array<string>,\r\n  PoP6h: Array<TimeValData>,\r\n  MinT: Array<number>,\r\n  MaxT: Array<number>\r\n}\r\n\r\ntype WeatherElementFuncMap = {\r\n  [Property in keyof WeatherElementLists]: Function\r\n}\r\n\r\nconst parse_func_map: WeatherElementFuncMap = {\r\n  Wx: parseWx,\r\n  CI: parseCI,\r\n  RH: getStrWE,\r\n  PoP12h: getStrWE,\r\n  PoP6h: parsePoP6h,\r\n  MinT: parseNumWE,\r\n  MaxT: parseNumWE\r\n}\r\n\r\n/**\r\n * we fetch only a town in a city, with several weatherElements\r\n * @param fetch_result SuccessWeatherAPIRes\r\n * @returns an object contains mutiple weather elements that we asked in api\r\n */\r\nfunction getWeatherElementLists(fetch_result: SuccessWeatherAPIRes): WeatherElementLists{\r\n  const weatherList = fetch_result.result.records.locations[0].location[0].weatherElement;\r\n  let res: WeatherElementLists = {\r\n    Wx: [],\r\n    CI: [],\r\n    RH: [],\r\n    PoP12h: [],\r\n    PoP6h: [],\r\n    MinT: [],\r\n    MaxT: []\r\n  };\r\n  for (let weatherElement of weatherList){\r\n    const t = weatherElement.elementName;\r\n    res[t] = parse_func_map[t](weatherElement);\r\n  }\r\n  return res;\r\n}\r\n\r\ninterface WxData {\r\n  start: Date,\r\n  duration: string,\r\n  is_night: boolean,\r\n  weather: string,\r\n  code: string\r\n}\r\n\r\n/**\r\n * @returns an array of objects contains following key:\r\n * - start: Date, the startTime of the periods for aligning with other items.\r\n * - duration: string, duration of the periods for rendering.\r\n * - is_night: bool, for rendering day/night components\r\n * - weather: string, weather description.\r\n * - code: string, the code to represents the weather above.\r\n */\r\nfunction parseWx(elementList: Wx): Array<WxData>{\r\n  return elementList.time.map(item => {\r\n    const start = getDateInWeatherAPI(item.startTime);\r\n    return {\r\n      start: start,\r\n      duration: getDuration(start, getDateInWeatherAPI(item.endTime)),\r\n      is_night: checkIsNight(start),\r\n      weather: item.elementValue[0].value,\r\n      code: item.elementValue[1].value\r\n    }\r\n  });\r\n}\r\n\r\ninterface CIData {\r\n  temperature: string,\r\n  feeling: string\r\n}\r\n/**\r\n * @returns an array of objects contains following key:\r\n * - temperature: string\r\n * - feeling: string, ci description\r\n */\r\nfunction parseCI(elementList: CI): Array<CIData>{\r\n  return elementList.time.map(item => ({\r\n    temperature: item.elementValue[0].value,\r\n    feeling: item.elementValue[1].value\r\n  }));\r\n}\r\n\r\ninterface TimeValData {\r\n  val: string,\r\n  start: Date\r\n}\r\n\r\n/**\r\n * Return startTime that used in alignment,\r\n * since Pop6h (used in weather3Day) has update frequency of (1/ 6hr)\r\n * that is different to others (1/ 3hr).\r\n * @returns an array of objects contains following key:\r\n * - start: Date, the startTime of the periods for aligning with other items.\r\n * - val: string typed PoP6h\r\n */\r\nfunction parsePoP6h(elementList: PoP6h): Array<TimeValData>{\r\n  return elementList.time.map(item => ({\r\n    start: getDateInWeatherAPI(item.startTime),\r\n    val: `${item.elementValue[0].value} %`\r\n  }));\r\n}\r\n\r\n/**\r\n * @returns an array of MinT | MaxT value in number type\r\n */\r\nfunction parseNumWE(elementList: MinT | MaxT): Array<number> {\r\n  return elementList.time.map(item => (\r\n    parseFloat(item.elementValue[0].value)\r\n  ));\r\n}\r\n\r\n/**\r\n * @returns an array of RH | PoP12h value in string type\r\n */\r\nfunction getStrWE(elementList: RH | PoP12h): Array<string> {\r\n  return elementList.time.map(item => (\r\n    `${item.elementValue[0].value} %`\r\n  ));\r\n}","import { exception } from \"../libs/responseConstructors\";\r\nimport { parseWeather3Day } from \"../libs/weatherDataConverters\";\r\nimport { \r\n  loadingStatus, initStatus, failedStatus\r\n} from '../libs/statusConstructors';\r\n\r\nimport {default as MSG_MAP} from '../datastore/app_msg_map.json';\r\n\r\nexport const weather3DayDataReducer: Weather3DayReducer = {\r\n  init: initData,\r\n  loading: loadingData,\r\n  fetched: getDataFromFetchResult\r\n}\r\n\r\nfunction getDataFromFetchResult(fetch_result: SuccessWeatherAPIRes | FailedRes, cur_week: Array<Date>): SuccessWeather3DayState | FailedWeather3DayState {\r\n  try{\r\n    if (fetch_result.is_success){\r\n      return successData(fetch_result, cur_week);\r\n    }\r\n    return failedData(fetch_result, cur_week);\r\n  }\r\n  catch (error){\r\n    return failedData(exception(error), cur_week);\r\n  }\r\n}\r\n\r\nfunction successData(fetch_result: SuccessWeatherAPIRes, cur_week: Array<Date>): SuccessWeather3DayState | FailedWeather3DayState {\r\n  try{\r\n    return parseWeather3Day(fetch_result);\r\n  }\r\n  catch (error){\r\n    return failedData(exception(error), cur_week);\r\n  }\r\n}\r\n\r\nfunction failedData(failed_result: FailedRes, cur_week: Array<Date>): FailedWeather3DayState {\r\n  return failedStatus(fakeData(failed_result.reason));\r\n}\r\n\r\nfunction initData(): InitWeather3DayState {\r\n  return initStatus(fakeData(MSG_MAP.init_weather));\r\n}\r\n\r\nfunction loadingData(): LoadingWeather3DayState {\r\n  return loadingStatus(fakeData(MSG_MAP.loading));\r\n}\r\n\r\nfunction fakeData(msg: string): Array<Weather3DayItemInfo>{\r\n  return [{\r\n    duration: '',\r\n    is_night: true,\r\n    weather: msg,\r\n    code: '-',\r\n    temperature: '-',\r\n    feel: '-',\r\n    RH: '-',\r\n    POP: '-'\r\n  }];\r\n}\r\n","import { exception } from \"../libs/responseConstructors\";\r\nimport { parseWeatherWeek } from \"../libs/weatherDataConverters\";\r\nimport { \r\n  loadingStatus, initStatus, failedStatus\r\n} from '../libs/statusConstructors';\r\n\r\nimport {default as MSG_MAP} from '../datastore/app_msg_map.json';\r\n\r\nexport const weatherWeekDataReducer: WeatherWeekReducer = {\r\n  init: initData,\r\n  loading: loadingData,\r\n  fetched: getDataFromFetchResult\r\n}\r\n\r\nfunction getDataFromFetchResult(fetch_result: SuccessWeatherAPIRes | FailedRes, cur_week: Array<Date>): SuccessWeatherWeekState | FailedWeatherWeekState {\r\n  try{\r\n    if (fetch_result.is_success){\r\n      return successData(fetch_result, cur_week);\r\n    }\r\n    return failedData(fetch_result, cur_week);\r\n  }\r\n  catch (error){\r\n    return failedData(exception(error), cur_week);\r\n  }\r\n}\r\n\r\nfunction successData(fetch_result: SuccessWeatherAPIRes, cur_week: Array<Date>): SuccessWeatherWeekState {\r\n  return parseWeatherWeek(fetch_result, cur_week);\r\n}\r\n\r\nfunction failedData(failed_result: FailedRes, cur_week: Array<Date>): FailedWeatherWeekState {\r\n  return failedStatus(fakeData(failed_result.reason));\r\n}\r\n\r\nfunction initData(): InitWeatherWeekState {\r\n  return initStatus(fakeData(MSG_MAP.init_weather));\r\n}\r\n\r\nfunction loadingData(): LoadingWeatherWeekState {\r\n  return loadingStatus(fakeData(MSG_MAP.loading));\r\n}\r\n\r\nfunction fakeData(msg: string): WeatherWeekData{\r\n  const weather_list: Array<WeatherWeekItemInfo> = Array(7);\r\n  weather_list.fill({\r\n    day: {\r\n      code: '-',\r\n      POP: msg\r\n    },\r\n    night: {\r\n      code: '-',\r\n      POP: msg\r\n    }\r\n  });\r\n  return {\r\n    weather_list,\r\n    temperature: {\r\n      maxT: [],\r\n      minT: []\r\n    }\r\n  };\r\n}\r\n","import React from 'react';\r\nimport {calendarDataReducer} from './calendarDataReducer';\r\nimport asyncFetchCalendar from '../libs/calendarAPIFetchers';\r\n\r\nimport { getCurrentWeekDateList, toDisplayDateList } from '../libs/dateHelpers';\r\nimport { asyncFetchWeather_3day, asyncFetchWeather_week } from '../libs/weatherAPIFetchers';\r\nimport {weather3DayDataReducer} from './weather3DayDataReducer';\r\nimport {weatherWeekDataReducer} from './weatherWeekDataReducer';\r\n\r\n/**\r\n * @returns [timeState, refresh]\r\n * - timeState a mutable constant, contains following keys:\r\n *    - cur_week: Array<Date> for sorting data in fetching api.\r\n *    - display_week: Array<string> for rendering in components\r\n * - refresh: a static function for refreshing timeState\r\n */\r\nexport function useTimeState(): [TimeState, () => void]{\r\n  const cur_week = getCurrentWeekDateList();\r\n  const [timeState, setTimeState] = React.useState<TimeState>({\r\n    cur_week,\r\n    display_week: toDisplayDateList(cur_week) \r\n  });\r\n  const refresh = () => {\r\n    const new_cur_week = getCurrentWeekDateList();\r\n    setTimeState({\r\n      cur_week: new_cur_week,\r\n      display_week: toDisplayDateList(new_cur_week)\r\n    })\r\n  }\r\n  return [timeState, refresh];\r\n}\r\n\r\ninterface RenderDataStateProps {\r\n  kwargs: any,\r\n  fetchFunc: Function,\r\n  reducer: StateReducer,\r\n  cur_week: Array<Date>\r\n}\r\n/**\r\n * used in rendering components.\r\n * @param kwargs  parameter to pass to fetchFunc\r\n * @param fetchFunc function that return a fetching state\r\n * @param reducer a map contains data processing functions \r\n * to generate data for rendering\r\n * @param cur_week as a param for reducer\r\n * @returns a mutable constant represents the fetching state of api\r\n */\r\nfunction RenderDataState(props: RenderDataStateProps): State {\r\n  // init state\r\n  const [state, setStatus] = React.useState(props.reducer.init());\r\n  React.useEffect(()=>{\r\n    async function update(){\r\n      // set loading\r\n      setStatus(props.reducer.loading());\r\n\r\n      // set final result\r\n      const result = await props.fetchFunc(props.kwargs);\r\n      setStatus(props.reducer.fetched(result, props.cur_week));\r\n    }\r\n    if (props.kwargs !== null){\r\n      update();\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [props.kwargs, props.cur_week]);\r\n  return state;\r\n}\r\n\r\nexport function getCalendarState(kwargs: CalendarParam | null, cur_week: Array<Date>): CalendarState {\r\n  return RenderDataState({\r\n    kwargs,\r\n    fetchFunc: asyncFetchCalendar,\r\n    reducer: calendarDataReducer,\r\n    cur_week\r\n  });\r\n}\r\n\r\nexport function getWeather3DayState(kwargs: WeatherParam | null, cur_week: Array<Date>): Weather3DayState {\r\n  return RenderDataState({\r\n    kwargs,\r\n    fetchFunc: asyncFetchWeather_3day,\r\n    reducer: weather3DayDataReducer,\r\n    cur_week\r\n  });\r\n}\r\n\r\nexport function getWeatherWeekState(kwargs: WeatherParam | null, cur_week: Array<Date>): WeatherWeekState {\r\n  return RenderDataState({\r\n    kwargs,\r\n    fetchFunc: asyncFetchWeather_week,\r\n    reducer: weatherWeekDataReducer,\r\n    cur_week\r\n  });\r\n}","import styled, {css} from \"styled-components\";\r\n\r\nexport function getCenterAlignCss(props: ContainerProps = {}){\r\n  return `\r\n    align-items: ${props.alignItems || 'center'};\r\n    justify-content: ${props.justifyContent || 'center'};\r\n    gap: var(--gap${props.gap || 1});\r\n  `;\r\n}\r\n\r\nexport function getVerticalFlexCss(props: ContainerProps = {}){\r\n  return `\r\n    display: flex;\r\n    flex-grow: ${props.flexGrow || 1};\r\n    flex-direction: column;\r\n    ${getCenterAlignCss(props)}\r\n  `;\r\n}\r\n\r\nexport function getHorizonalFlexCss(props: ContainerProps = {}){\r\n  return `\r\n    display: flex;\r\n    flex-grow: ${props.flexGrow || 1};\r\n    flex-direction: row;\r\n    ${getCenterAlignCss(props)}\r\n  `;\r\n}\r\n\r\nexport function getGridCss(props: ContainerProps = {}){\r\n  return `\r\n    display: grid;\r\n    grid-template: ${props.row || '1fr'} / ${props.col || '1fr'};\r\n    ${getCenterAlignCss(props)}\r\n    grid-gap: var(--gap${props.gap || 1});\r\n  `;\r\n}\r\n\r\nexport function getCircleCss(diameter: string = 'var(--iconsize)'){\r\n  return `\r\n    display: flex;\r\n    border-radius: 100%;\r\n    ${getCenterAlignCss()}\r\n    height: ${diameter};\r\n    width: ${diameter};\r\n  `;\r\n}\r\n\r\nexport const BigRoundCss = css`\r\n  border-radius: var(--iconradius);\r\n  padding: var(--iconradius);\r\n`\r\n\r\nexport const SmallRoundCss = css`\r\n  border-radius: var(--gap1);\r\n  padding: var(--gap1);\r\n`\r\n\r\nexport const CircleSideCss = css`\r\n  border-radius: var(--iconsize);\r\n  height: var(--iconsize);\r\n  min-width: var(--iconsize);\r\n  padding: 5px var(--iconradius);\r\n`;\r\n\r\nexport const ShadowCss = css`\r\n  box-shadow: 0 0 var(--gap3) 1px var(--shadowcolor);\r\n  &:hover {\r\n    box-shadow: var(--gap2) var(--gap2) var(--gap3) 5px var(--shadowcolor);\r\n  }\r\n`\r\nexport const CircleCss = css`\r\n  border-radius: 100%;\r\n  padding: 5px;\r\n  height: var(--iconsize);\r\n  width: var(--iconsize);\r\n`\r\n\r\nexport const RowDiv = styled.div((props: ContainerProps)=>`\r\n  ${getHorizonalFlexCss(props)}\r\n`);\r\n\r\nexport const ColDiv = styled.div((props: ContainerProps)=>`\r\n  ${getVerticalFlexCss(props)}\r\n`);\r\n\r\nexport const GridDiv = styled.div((props: ContainerProps) =>`\r\n  ${getGridCss(props)}\r\n`)\r\n\r\nexport const RowInGridDiv = styled.div((props: ContainerProps) => `\r\n  ${getHorizonalFlexCss(props)}\r\n  grid-area: ${props.gridArea || 'unset'};\r\n`)\r\n\r\nexport const ColInGridDiv = styled.div((props: ContainerProps) => `\r\n  ${getVerticalFlexCss(props)}\r\n  grid-area: ${props.gridArea || 'unset'};\r\n`)\r\n\r\nexport const CenterTitle = styled.h1`\r\n  text-align: center;\r\n`\r\n","import styled from 'styled-components';\r\nimport { RowDiv, ColDiv } from './appStyleWrappers';\r\n\r\ninterface IconLabeledItemProps {\r\n  icon_cls_name: string,\r\n  content: string | JSX.Element\r\n}\r\n\r\nexport function IconLabeledElement(props: IconLabeledItemProps){\r\n  return (\r\n    <RowDiv>\r\n      <SmallIcon className={props.icon_cls_name}/>\r\n      <ColDiv alignItems='start'>\r\n        {props.content}\r\n      </ColDiv>\r\n    </RowDiv>\r\n  );\r\n}\r\n\r\nexport const SmallIcon = styled.i`\r\n  opacity: 0.8;\r\n`\r\n\r\nexport const BigIcon = styled.i`\r\n  font-size: var(--iconsize);\r\n  opacity: 0.5;\r\n`\r\n\r\nexport const Big3DIcon = styled.i`\r\n  font-size: 4rem;\r\n  padding: var(--fontsize_big) 0;\r\n  color: var(--bgcolor);\r\n  text-shadow: -1px 0px 10px var(--bgcolor);\r\n  filter: brightness(1.5) drop-shadow(5px 5px 5px var(--maincolor1));\r\n`","import styled from 'styled-components';\r\n\r\ninterface LoaderProps {\r\n  radius?: 1 | 2 | 3\r\n}\r\n\r\nexport const Loader = styled.div((props: LoaderProps)=>{\r\n  const r = (props.radius || 1) * 30; // radius\r\n  const d = 2 * r; // diameter\r\n  const w = r / 6; // width of circle\r\n  return `\r\n  width: ${d}px;\r\n  height: ${d}px;\r\n  margin: auto;\r\n  background: none;\r\n  position: relative;\r\n  border-radius: 100%;\r\n  \r\n  &:before, &:after {\r\n    content: '';\r\n    position: absolute;\r\n    display: block;\r\n    height: calc(${d}px - ${w * 2}px);\r\n    width: calc(${r}px - ${w}px);\r\n    border: ${w}px solid;\r\n  }\r\n  &:before {\r\n    transform-origin: ${r}px ${r}px;\r\n    animation: RotatingAnime 3s ease infinite;\r\n    border-radius: ${d}px 0 0 ${d}px;\r\n    animation: RotatingAnime 3s ease infinite;\r\n    opacity: 0.8;\r\n    border-color: var(--maincolor1) transparent var(--maincolor1) var(--maincolor1);\r\n  }\r\n  &:after {\r\n    margin-left: calc(${r}px - ${w}px);\r\n    transform-origin: ${w}px ${r}px;\r\n    animation: RotatingAnime 1s ease infinite;\r\n    border-radius: 0 ${d}px ${d}px 0;\r\n    animation: RotatingAnime 3s ease infinite 2s;\r\n    opacity: 0.8;\r\n    border-color: var(--maincolor2) transparent var(--maincolor2) transparent;\r\n  }\r\n`\r\n});","import styled from 'styled-components';\r\n\r\ninterface DecoBackgroundProps {\r\n  img_url: string;\r\n}\r\nexport function DecoBackground(props: DecoBackgroundProps){\r\n  return (\r\n    <DecoBackgroundDiv>\r\n      <DecoImg src={props.img_url} alt='deco_pic'/>\r\n    </DecoBackgroundDiv>\r\n  );\r\n}\r\n\r\nconst DecoBackgroundDiv = styled.div`\r\n  background: linear-gradient(45deg, var(--maincolor2), var(--maincolor1));\r\n  box-shadow: 50px 50px 70px 50px var(--shadowcolor);\r\n`;\r\n\r\nconst DecoImg = styled.img`\r\n  object-fit: cover;\r\n`","import {default as ICON_MAP} from '../datastore/app_icon_map.json';\r\nimport {default as WEATHER_ICON_MAP} from '../datastore/weather_icon_map.json';\r\nimport {default as WEATHER_PIC_MAP} from '../datastore/weather_pic_map.json';\r\nimport { Loader } from './Loader';\r\nimport { BigIcon, Big3DIcon } from './IconElements';\r\nimport { DecoBackground } from './DecoBackground';\r\n\r\ntype ConstructorMap = {\r\n  [Property in Status]: (...args: any) => JSX.Element\r\n}\r\n\r\ninterface WeatherDisplayElementProps {\r\n  code: string,\r\n  is_night: boolean\r\n}\r\n/**\r\n * used in week weather for each status.\r\n * @param args WeatherDisplayElementProps, contains following keys:\r\n * - code: string, a code represents current weather.\r\n * - is_night: boolean: there are day and night version icon.\r\n */\r\nexport const WeatherDisplayReducer: ConstructorMap = {\r\n  init: ((args: WeatherDisplayElementProps) => \r\n    <BigIcon className={ICON_MAP.empty}/>\r\n  ),\r\n  loading: ((args: WeatherDisplayElementProps) => \r\n    <Loader/>\r\n  ),\r\n  failed: ((args: WeatherDisplayElementProps) => \r\n    <BigIcon className={ICON_MAP.failed}/>\r\n  ),\r\n  success: ((args: WeatherDisplayElementProps) => \r\n    <BigIcon className={getWeatherIconClsName(args)}/>\r\n  )\r\n}\r\n\r\n/**\r\n * used in 3day weather for each status.\r\n * @param args WeatherDisplayElementProps, contains following keys:\r\n * - code: string, a code represents current weather.\r\n * - is_night: boolean: there are day and night version icon.\r\n */\r\nexport const SpecialWeatherDisplayReducer: ConstructorMap = {\r\n  init: ((args: WeatherDisplayElementProps) => \r\n    <Big3DIcon className={ICON_MAP.empty}/>\r\n  ),\r\n  loading: ((args: WeatherDisplayElementProps) => \r\n    <Loader radius={2}/>\r\n  ),\r\n  failed: ((args: WeatherDisplayElementProps) => \r\n    <Big3DIcon className={ICON_MAP.failed}/>\r\n  ),\r\n  success: ((args: WeatherDisplayElementProps) => \r\n    <Big3DIcon className={getWeatherIconClsName(args)}/>\r\n  )\r\n}\r\n\r\n\r\n/**\r\n * used in 3day weather for each status.\r\n * @param args WeatherDisplayElementProps, contains following keys:\r\n * - code: string, a code represents current weather.\r\n * - is_night: boolean: there are day and night version icon.\r\n */\r\n export const WeatherPicReducer: ConstructorMap = {\r\n  init: ((args: WeatherDisplayElementProps) => \r\n    <DecoBackground\r\n      img_url={getWeatherPicUrl()}\r\n    />\r\n  ),\r\n  loading: ((args: WeatherDisplayElementProps) => \r\n    <DecoBackground\r\n      img_url={getWeatherPicUrl()}\r\n    />\r\n  ),\r\n  failed: ((args: WeatherDisplayElementProps) => \r\n    <DecoBackground\r\n      img_url={getWeatherPicUrl()}\r\n    />\r\n  ),\r\n  success: ((args: WeatherDisplayElementProps) => \r\n    <DecoBackground\r\n      img_url={getWeatherPicUrl(args)}\r\n    />\r\n  )\r\n}\r\n\r\nconst defaultWeatherArgs: WeatherDisplayElementProps = {\r\n  code: '00',\r\n  is_night: false\r\n};\r\n\r\n/**\r\n * @param args, contains following keys\r\n * - code : string represents weather\r\n * - is_night: bool, there are day and night version\r\n */\r\nfunction getWeatherIconClsName(args: WeatherDisplayElementProps = defaultWeatherArgs): string {\r\n  let icons = WEATHER_ICON_MAP[args.code as keyof typeof WEATHER_ICON_MAP];\r\n  \r\n  // not find weather\r\n  if (! icons){\r\n    icons = WEATHER_ICON_MAP[\"00\"];\r\n  }\r\n  return args.is_night ? icons.night: icons.day;\r\n}\r\n\r\n/**\r\n * put images in public url so that it can imports.\r\n * otherwise it might failed.\r\n * @param args, contains following keys\r\n * - code : string represents weather\r\n * - is_night: bool, there are day and night version\r\n */\r\nfunction getWeatherPicUrl(args: WeatherDisplayElementProps = defaultWeatherArgs): string {\r\n  // weather: string of relevant weather description\r\n  // is_night: bool\r\n  let pics = WEATHER_PIC_MAP[args.code as keyof typeof WEATHER_PIC_MAP];\r\n  \r\n  // not find weather\r\n  if (! pics){\r\n    pics = WEATHER_PIC_MAP[\"00\"];\r\n  }\r\n  return `WeatherPics/${args.is_night ? pics.night: pics.day}.jpg`;\r\n}","import styled, {css} from 'styled-components';\r\nimport {\r\n  ShadowCss, BigRoundCss,\r\n  RowDiv, ColDiv, GridDiv\r\n} from './appStyleWrappers';\r\n\r\n// use muti-layer css (ex GeneralCardCss) in template might cause error\r\n// avoid doing that.\r\nexport const VerticalFlexRoundCard = styled(ColDiv)((props: ContainerProps) => GeneralCardCss)\r\n\r\nexport const BigGridRoundCard = styled(GridDiv)((props: ContainerProps) => GeneralCardCss)\r\n\r\nexport const LeftBorderCard = styled(RowDiv)((props: ContainerProps) => `\r\n  padding: var(--gap2);\r\n  &:hover {\r\n    cursor: pointer;\r\n    background: var(--assistcolor);\r\n  }\r\n  &:before {\r\n    content: \"\";\r\n    width: var(--gap2);\r\n    height: calc(100% + var(--gap2) + var(--gap2));\r\n    transform: translateX(calc(0px - var(--gap2)));\r\n    background: var(--maincolor1);\r\n  }\r\n  &:hover:before {\r\n    background: linear-gradient(var(--maincolor1) 50%, var(--maincolor2) 50%);\r\n    background-size: 200% 200%;\r\n    animation: 1s ease 0s 1 normal forwards running FillAnime;\r\n  }\r\n`)\r\n\r\nconst GeneralCardCss = css`\r\n  ${BigRoundCss}\r\n  ${ShadowCss} \r\n  backdrop-filter: blur(var(--gap1));\r\n  background: var(--bgcolor_trans);\r\n`;","// import order: https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/order.md\r\nimport styled from 'styled-components';\r\nimport {\r\n  CircleSideCss, CircleCss, RowDiv, ColDiv, ShadowCss,\r\n  getHorizonalFlexCss\r\n} from './appStyleWrappers';\r\nimport { SmallIcon } from './IconElements';;\r\n\r\ninterface ButtonElementProps {\r\n  is_primary?: boolean,\r\n  is_disabled?: boolean\r\n}\r\n\r\ninterface ButtonProps extends ButtonElementProps{\r\n  func: React.MouseEventHandler\r\n}\r\n\r\ninterface CircleSideButtonProps extends ButtonProps {\r\n  content: JSX.Element | string\r\n}\r\n/**\r\n * @param props\r\n * - cls_name: string of additional classname\r\n * - func: export function that to display when cliking it\r\n * - is_disabled, is_primary: bool indicates the status of the button\r\n */\r\nexport function CircleSideButton(props: CircleSideButtonProps){\r\n  return (\r\n    <CircleSideBtn\r\n      disabled={props.is_disabled}\r\n      is_primary={props.is_primary}\r\n      onClick={props.func}\r\n    >\r\n      <RowDiv>{props.content}</RowDiv>\r\n    </CircleSideBtn>\r\n  );\r\n}\r\n\r\ninterface IconButtonProps extends ButtonProps {\r\n  icon_cls_name: string\r\n}\r\n/**\r\n * @param props\r\n * - cls_name: string of additional classname\r\n * - icon_cls_name: string, bootstrap classname\r\n * - func: export function that to display when cliking it\r\n * - is_disabled, is_primary: bool indicates the status of the button\r\n */\r\nexport function IconCircleButton(props: IconButtonProps){\r\n  return (\r\n    <CircleBtn\r\n      disabled={props.is_disabled}\r\n      is_primary={props.is_primary}\r\n      onClick={props.func}\r\n    >\r\n      <SmallIcon className={props.icon_cls_name} />\r\n    </CircleBtn>\r\n  );\r\n}\r\n\r\ninterface IconTitledButtonProps extends IconButtonProps {\r\n  content: JSX.Element | string\r\n}\r\n/**\r\n * @param props\r\n * - cls_name: string of additional classname\r\n * - icon_cls_name: string, bootstrap classname\r\n * - func: export function that to display when cliking it\r\n * - is_disabled, is_primary: bool indicates the status of the button\r\n * - content: string as the button description\r\n */\r\nexport function IconTitledButton(props: IconTitledButtonProps){\r\n  return (\r\n    <CircleSideBtn\r\n      disabled={props.is_disabled}\r\n      is_primary={props.is_primary}\r\n      onClick={props.func}\r\n    >\r\n      <SmallIcon className={props.icon_cls_name}/>\r\n      <ColDiv>{props.content}</ColDiv>\r\n    </CircleSideBtn>\r\n  );\r\n}\r\n\r\nconst HoverEffect = `\r\n  &:hover {\r\n    cursor: pointer;\r\n    background: linear-gradient(var(--bgcolor) 50%, var(--maincolor2) 50%);\r\n    background-size: 200% 200%;\r\n    animation: 1s ease 0s 1 normal forwards running FillAnime;\r\n  }\r\n`;\r\nconst Btn = styled.button((props: ButtonElementProps)=> `\r\n  ${getHorizonalFlexCss()}\r\n  background: var(--${props.is_primary? 'maincolor1': 'bgcolor'});\r\n  border: none;\r\n  transition-duration: 2s;\r\n  ${HoverEffect}\r\n  &:disabled {\r\n    opacity: 0.5;\r\n  }\r\n  &:disabled:hover {\r\n    cursor: not-allowed;\r\n    background: var(--bgcolor);\r\n  }\r\n`)\r\nconst CircleSideBtn = styled(Btn)`\r\n  ${CircleSideCss}\r\n`;\r\nconst CircleBtn = styled(Btn)`\r\n  ${CircleCss}\r\n  ${ShadowCss}\r\n  flex-grow: unset;\r\n  transform: scale(1.25);\r\n`;","import { RefObject } from 'react';\r\n\r\n/**\r\n * @param ref_obj: RefObject<HTMLDivElement>\r\n * make an flip and fade in effect\r\n */\r\nfunction fadeInEffect(ref_obj: RefObject<HTMLDivElement>){\r\n  const effect_func = (elapsed: number) => {\r\n    if (! ref_obj.current){\r\n      return;\r\n    }\r\n    ref_obj.current.style.opacity = `${elapsed}%`;\r\n    ref_obj.current.style.transform = `rotateY(${elapsed * 3.6}deg)`;\r\n  }\r\n  makeAnimate(effect_func);\r\n}\r\n/**\r\n * @param ref_obj: RefObject<HTMLDivElement>\r\n */\r\nfunction showContentEffect(ref_obj: RefObject<HTMLDivElement>){\r\n  const effect_func = (elapsed: number) => {\r\n    if (! ref_obj.current){\r\n      return;\r\n    }\r\n    ref_obj.current.style.clipPath = GetClipPath(elapsed);\r\n  }\r\n  makeAnimate(effect_func);\r\n}\r\n/**\r\n * @param ref_obj: RefObject<HTMLDivElement>\r\n */\r\nfunction hideContentEffect(ref_obj: RefObject<HTMLDivElement>){\r\n  const effect_func = (elapsed: number) => {\r\n    if (! ref_obj.current){\r\n      return;\r\n    }\r\n    const delta = 100 - elapsed;\r\n    ref_obj.current.style.clipPath = GetClipPath(delta);\r\n  }\r\n  makeAnimate(effect_func);\r\n}\r\n\r\n/**\r\n * use window.requestAnimationFrame to make effect\r\n * @param effect_func (t: number)=> void,\r\n * a function that accepts timestamp as args to make effect on react refobject.\r\n */\r\nfunction makeAnimate(effect_func: (t: number)=> void){\r\n  let elapsed: number = 0;\r\n  function makeEffect(timestamp: number){\r\n    effect_func(elapsed);\r\n    if (elapsed < 95){\r\n      elapsed += 5;\r\n      window.requestAnimationFrame(makeEffect);\r\n    }\r\n    else {\r\n      // end situation\r\n      effect_func(100);\r\n      elapsed = 0;\r\n    }\r\n  }\r\n  window.requestAnimationFrame(makeEffect);\r\n}\r\n\r\n/**\r\n * @param d time delta\r\n * @return a string of css clip path\r\n */\r\n function GetClipPath(d: number){\r\n  return d === 100 ? 'none': `ellipse(${d}% ${d}% at 50% 0%)`;\r\n}\r\n\r\nexport {fadeInEffect, showContentEffect, hideContentEffect}","import { \r\n  useRef,\r\n  ReactNode\r\n} from 'react';\r\nimport {IconCircleButton} from './ButtonComponent';\r\nimport { GridDiv, RowInGridDiv } from './appStyleWrappers';\r\nimport { fadeInEffect } from '../libs/componentEffects';\r\nimport {default as ICON_MAP} from '../datastore/app_icon_map.json';\r\n\r\ninterface SlideShowProps {\r\n  children: ReactNode,\r\n  max_page: number,\r\n  page: number,\r\n  setPage: React.Dispatch<React.SetStateAction<number>>\r\n}\r\n/**\r\n * @param props \r\n * - max_page: number, the max page of content;\r\n * - page: number of current page.\r\n * - setPage: React.Dispatch<React.SetStateAction<number>> to control page.\r\n * - children: ReactNode.\r\n */\r\nexport default function SlideShowWrapper(props: SlideShowProps){\r\n  const ref_for_effect = useRef<HTMLDivElement>(null); \r\n\r\n  const changePage = (change_amount: number) => {\r\n    const new_page = props.page + change_amount;\r\n    if (new_page < 0 || new_page === props.max_page){\r\n      return;\r\n    }\r\n    setTimeout(()=> {\r\n      props.setPage(new_page);\r\n    }, 20);\r\n    fadeInEffect(ref_for_effect);\r\n  }\r\n  const nextPage = () => {\r\n    changePage(1);\r\n  }\r\n  const prePage = () => {\r\n    changePage(-1);\r\n  }\r\n  return (\r\n    <GridDiv\r\n      col='var(--iconradius) 1fr var(--iconradius)'\r\n    >\r\n      <RowInGridDiv\r\n        ref={ref_for_effect}\r\n        alignItems='stretch'\r\n        gridArea='1/ 2/ 1/ 2'\r\n      >\r\n        {props.children}\r\n      </RowInGridDiv>\r\n      <RowInGridDiv\r\n        justifyContent='space-between'\r\n        gridArea='1/ 1/ 1/ 4'\r\n      >\r\n        <IconCircleButton\r\n          icon_cls_name={ICON_MAP.prev_page}\r\n          is_disabled={props.page === 0}\r\n          func={prePage}\r\n        />\r\n        <IconCircleButton\r\n          icon_cls_name={ICON_MAP.next_page}\r\n          is_disabled={props.page === props.max_page}\r\n          func={nextPage}\r\n        />\r\n      </RowInGridDiv>\r\n    </GridDiv>\r\n  );\r\n}","import { useState, useEffect } from 'react';\r\n\r\nimport { RowDiv } from '../components/appStyleWrappers';\r\nimport {IconLabeledElement} from '../components/IconElements';\r\nimport { \r\n  SpecialWeatherDisplayReducer, \r\n  WeatherPicReducer\r\n} from '../components/StateComponents';\r\nimport {VerticalFlexRoundCard} from '../components/Card';\r\nimport SlideShowWrapper from '../components/SlideShowWrapper';\r\nimport {default as ICON_MAP} from '../datastore/app_icon_map.json'\r\nimport {default as CONTENT_MAP} from '../datastore/app_content_map.json';\r\n\r\ninterface Weather3DaySectionProps {\r\n  state: Weather3DayState\r\n}\r\n\r\nexport default function Weather3DaySection(props: Weather3DaySectionProps){\r\n  const [page, setPage] = useState<number>(0);\r\n\r\n  // be very careful, the page would stay the same in re-rendering\r\n  // and will cause an error if not changing manually.\r\n  useEffect(()=> {\r\n    if (page >= props.state.data.length){\r\n      setPage(0);\r\n    }\r\n  }, [props.state.data, page]);\r\n\r\n  // the update above might be slower than rendering\r\n  // thus we need a constant to ensure.\r\n  const p = Math.min(page, props.state.data.length - 1);\r\n\r\n  return (\r\n    <section id=\"weather_3day\">\r\n      <div id=\"weather_3day_pic\">\r\n        <Weather3DayPic\r\n          status={props.state.status}\r\n          item_info={props.state.data[p]}\r\n        />\r\n      </div>\r\n      <SlideShowWrapper\r\n        max_page={props.state.data.length - 1}\r\n        page={p}\r\n        setPage={setPage}\r\n      >\r\n        <Weather3DayCard\r\n          status={props.state.status}\r\n          item_info={props.state.data[p]}\r\n        />\r\n      </SlideShowWrapper>\r\n    </section>\r\n  );\r\n}\r\n\r\ninterface Weather3DayItemProps {\r\n  status: Status,\r\n  item_info: Weather3DayItemInfo\r\n}\r\nfunction Weather3DayCard(props: Weather3DayItemProps){\r\n  return (\r\n    <VerticalFlexRoundCard>\r\n      <RowDiv>{props.item_info.duration || CONTENT_MAP.weather_3day}</RowDiv>\r\n      <RowDiv>\r\n        {SpecialWeatherDisplayReducer[props.status]({\r\n          code: props.item_info.code,\r\n          is_night: props.item_info.is_night\r\n        })}\r\n      </RowDiv>\r\n      <RowDiv>{props.item_info.weather}</RowDiv>\r\n      <RowDiv>\r\n        <h1>{`${props.item_info.temperature} ${CONTENT_MAP.temperature_unit}`}</h1>\r\n        {props.item_info.feel}\r\n      </RowDiv>\r\n      <RowDiv>\r\n        {['RH', 'POP'].map((title, i)=>(\r\n          <IconLabeledElement\r\n            icon_cls_name={ICON_MAP[title as keyof typeof ICON_MAP]}\r\n            content={`${props.item_info[title as keyof Weather3DayItemInfo]}`}\r\n            key={`labeled-${i}`}\r\n          />\r\n        ))}\r\n      </RowDiv>\r\n    </VerticalFlexRoundCard>\r\n  );\r\n}\r\n\r\nfunction Weather3DayPic(props: Weather3DayItemProps){\r\n  return (\r\n    WeatherPicReducer[props.status]({\r\n      code: props.item_info.code,\r\n      is_night: props.item_info.is_night\r\n    })\r\n  );\r\n}","import styled from 'styled-components';\r\nimport { GridDiv, SmallRoundCss } from './appStyleWrappers';\r\nimport { \r\n  getXCoords, getListOfYCoords, getListOfYLabels\r\n} from '../libs/chartHelpers';\r\n\r\ninterface ChartComponentProps {\r\n  x_labels: Array<string>,\r\n  data: {\r\n    vals_lists: Array<Array<number>>,\r\n    unit_list: Array<string>\r\n  }\r\n}\r\n/**\r\n * @param props contains following keys:\r\n * - x_labels: array of labels on x-axis\r\n * - data: object which contains following keys:\r\n *    * vals_lists: Array<Array<number>>, each dataset(val_list) \r\n *      has same (or larger) length as x_labels.\r\n *    * unit_list: Array<string>, unit for each dataset.\r\n */\r\nexport default function ChartComponent(props: ChartComponentProps){\r\n  const x_coords = getXCoords(props.x_labels.length);\r\n  const y_coords_list = getListOfYCoords(props.data.vals_lists);\r\n  const y_labels_list = getListOfYLabels(props.data);\r\n  \r\n  return (\r\n  <ChartContainer\r\n    row='1fr'\r\n    col='1fr'\r\n    alignItems='stretch'\r\n    justifyContent='stretch'\r\n  >\r\n    <ChartLabelComponent\r\n      x_labels={props.x_labels}\r\n      y_coords_list={y_coords_list}\r\n      y_labels_list={y_labels_list}\r\n    />\r\n    <ChartBody\r\n      x_coords={x_coords}\r\n      y_coords_list={y_coords_list}\r\n    />\r\n  </ChartContainer>\r\n  );\r\n}\r\n\r\ninterface ChartLabelComponentProps {\r\n  x_labels: Array<string>,\r\n  y_labels_list: Array<Array<string>>,\r\n  y_coords_list: Array<Array<number>>\r\n}\r\n\r\nfunction ChartLabelComponent(props: ChartLabelComponentProps){\r\n  return (\r\n    <ChartLabelContainer\r\n      col={`repeat(${props.x_labels.length}, 1fr)`}\r\n      alignItems='stretch'\r\n      justifyContent='stretch'\r\n    >\r\n      {props.x_labels.map((x_label, i)=>\r\n        <ChartLabelAtX\r\n          x_label={x_label}\r\n          y_labels={props.y_labels_list.map(y_labels => y_labels[i])}\r\n          y_coords={props.y_coords_list.map(y_coords => y_coords[i])}\r\n          key={`label_x-${i}`}\r\n        />\r\n      )}\r\n    </ChartLabelContainer>\r\n  );\r\n}\r\n\r\ninterface ChartLabelAtXProps {\r\n  x_label: string,\r\n  y_labels: Array<string>,\r\n  y_coords: Array<number>\r\n}\r\nfunction ChartLabelAtX(props: ChartLabelAtXProps){\r\n  return (\r\n    <ColAtX\r\n      row=\"var(--fontsize_normal) 1fr\"\r\n      alignItems=\"start\"\r\n    >\r\n      {props.x_label}\r\n      {props.y_labels.map((label, i)=>\r\n        <ChartLabel\r\n          top={props.y_coords[i]}\r\n          key={`label-${i}`}\r\n        >\r\n          {label}\r\n        </ChartLabel>\r\n      )}\r\n    </ColAtX>\r\n  );\r\n}\r\n\r\ninterface ChartBodyProps {\r\n  x_coords: Array<number>\r\n  y_coords_list: Array<Array<number>>\r\n}\r\nfunction ChartBody(props: ChartBodyProps){\r\n  return (\r\n    <MySvg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      {props.y_coords_list.map((y_coords, i)=>\r\n        <LineGroup\r\n          x_coords={props.x_coords}\r\n          y_coords={y_coords}\r\n          key={`linegroup-${i}`}\r\n        />\r\n      )}\r\n    </MySvg>\r\n  );\r\n}\r\n\r\ninterface LineGroupProps {\r\n  x_coords: Array<number>,\r\n  y_coords: Array<number>\r\n}\r\n/**\r\n * @param props x_coords, y_coords;\r\n * coords for x/ y axises, x_coords.length === y_coords.length\r\n */\r\nfunction LineGroup(props: LineGroupProps){\r\n  if (props.x_coords.length > props.y_coords.length){\r\n    return <g/>;\r\n  }\r\n  const Lines = [];\r\n  let prevX = props.x_coords[0];\r\n  let prevY = props.y_coords[0];\r\n  for (let i = 0; i < props.x_coords.length; i ++){\r\n    Lines.push(\r\n      <LineAndMarker\r\n        x1={prevX}\r\n        y1={prevY}\r\n        x2={props.x_coords[i]}\r\n        y2={props.y_coords[i]}\r\n        key={`line-${i}`}\r\n      />\r\n    );\r\n    prevX = props.x_coords[i];\r\n    prevY = props.y_coords[i];\r\n  }\r\n  return (\r\n    <MyLineGroup>\r\n      {Lines}\r\n      <animateTransform \r\n        attributeName=\"transform\"\r\n        attributeType=\"XML\"\r\n        type=\"scale\"\r\n        from=\"1 0\"\r\n        to=\"1 1\"\r\n        begin=\"1s\"\r\n        dur=\"3s\"\r\n        repeatCount=\"0\"/>\r\n    </MyLineGroup>\r\n  );\r\n}\r\n\r\ninterface LineAndMarkerProps {\r\n  x1: number,\r\n  x2: number,\r\n  y1: number,\r\n  y2: number\r\n}\r\nfunction LineAndMarker(props: LineAndMarkerProps){\r\n  return (\r\n    <>\r\n      <MyLine\r\n        x1={`${props.x1}%`} y1={`${props.y1}%`} \r\n        x2={`${props.x2}%`}  y2={`${props.y2}%`} \r\n      />\r\n      <MyCircle\r\n        cx={`${props.x2}%`} cy={`${props.y2}%`} \r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nconst ChartContainer = styled(GridDiv)`\r\n  ${SmallRoundCss}\r\n  backdrop-filter: blur( 1px ) brightness(0.75);\r\n  height: 100%;\r\n`;\r\n\r\nconst ColAtX = styled(GridDiv)`\r\n  width: min-content;\r\n  &:hover {\r\n    background: var(--assistcolor);\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst ChartLabelContainer = styled(GridDiv)`\r\n  grid-area: 1/1/1/1;\r\n  font-size: var(--fontsize_small);\r\n  text-align: center;\r\n`;\r\n\r\ninterface ChartLabelProps {\r\n  top: number\r\n}\r\nconst ChartLabel = styled.div((props: ChartLabelProps)=> `\r\n  position: relative;\r\n  top: ${props.top}%;\r\n  grid-area: 2/1/2/1;\r\n  filter: opacity(0);\r\n  transform: translateY(var(--fontsize_small));\r\n  height: fit-content;\r\n  ${ColAtX}:hover & {\r\n    filter: opacity(1);\r\n  }\r\n`);\r\n\r\nconst MySvg = styled.svg`\r\n  grid-area: 1/1/1/1;\r\n  width: 100%;\r\n  margin-top: calc(var(--fontsize_normal) + var(--fontsize_normal));\r\n  height: calc(100% - var(--fontsize_normal) - var(--fontsize_normal));\r\n`;\r\n\r\nconst MyLineGroup = styled.g`\r\n  transform-origin: center;\r\n  filter: drop-shadow(1px 1px 2px var(--maincolor2)) brightness(1.1);\r\n`;\r\n\r\nconst MyLine = styled.line`\r\n  fill: var(--bgcolor);\r\n  stroke: var(--bgcolor);\r\n  stroke-linecap: round;\r\n  stroke-width: 5;\r\n`;\r\n\r\nconst MyCircle = styled.circle`\r\n  fill: var(--bgcolor);\r\n  stroke: var(--bgcolor);\r\n  stroke-linecap: round;\r\n  r: 5;\r\n`;","/**\r\n * @returns Array<number> which can split x-axis evenly into split_number-th parts.\r\n */\r\nexport function getXCoords(split_number: number){\r\n  const x_unit = 100 / split_number;\r\n  const x_coords = [x_unit * 0.5];\r\n  for (let i = 1; i < split_number; i++){\r\n    x_coords.push(x_coords[i - 1] + x_unit);\r\n  }\r\n  return x_coords;\r\n}\r\n\r\n/**\r\n * @param val_lists: Array<Array<number>>: a mutiple set of data vals.\r\n * @returns Array<Array<number>> which turn vals of each set into y_coords.\r\n */\r\nexport function getListOfYCoords(val_lists: Array<Array<number>>){\r\n\r\n  // calculate the range in y axis\r\n  const y_coords = val_lists.flat();\r\n  const minY = Math.min(...y_coords);\r\n  const maxY = Math.max(...y_coords);\r\n\r\n  // all val lists are empty\r\n  if (minY > maxY){\r\n    return [];\r\n  }\r\n  const getYPos: (val: number)=> number = getYposFunctionBuilder(minY, maxY);\r\n  return val_lists.map(vals => \r\n    vals.map(val => getYPos(val))\r\n  );\r\n}\r\n\r\ninterface GetListOfYLabelsArgs {\r\n  vals_lists: Array<Array<number>>,\r\n  unit_list: Array<string>\r\n}\r\n/**\r\n * @param kwargs: contains following keys:\r\n * - vals_lists: Array<Array<number>>: a mutiple set of data vals.\r\n * - unit_list: Array<string>: a list of units for vals above.\r\n * @returns Array<Array<string>> which turn vals of each set into y_labels.\r\n */\r\nexport function getListOfYLabels(kwargs: GetListOfYLabelsArgs){\r\n  return kwargs.vals_lists.map((vals, i) => \r\n    vals.map(val => `${val} ${kwargs.unit_list[i]}`)\r\n  );\r\n}\r\n\r\n/**\r\n * @returns (val: number)=> number, a function helps decide y pos by range of y data.\r\n */\r\nfunction getYposFunctionBuilder(minY: number, maxY: number) {\r\n  // a horinzonal line\r\n  if (maxY === minY){\r\n    return ((val: number)=> 50);\r\n  }\r\n  return ((val: number)=> 10 + 80 * (1 - (val - minY) / (maxY - minY)));\r\n}","import { VerticalFlexRoundCard } from '../components/Card';\r\nimport ChartComponent from '../components/ChartComponent';\r\nimport {default as CONTENT_MAP} from '../datastore/app_content_map.json';\r\n\r\ninterface WeatherWeekSectionProps {\r\n  display_week: Array<string>,\r\n  state: WeatherWeekState\r\n}\r\nexport default function WeatherWeekSection(props: WeatherWeekSectionProps){\r\n  return (\r\n    <VerticalFlexRoundCard\r\n      id=\"weather_week\"\r\n    >\r\n      {CONTENT_MAP.weather_week}\r\n      <ChartComponent\r\n        x_labels={props.display_week}\r\n        data={{\r\n          vals_lists: [\r\n            props.state.data.temperature.maxT,\r\n            props.state.data.temperature.minT\r\n          ],\r\n          unit_list: [\r\n            CONTENT_MAP.temperature_unit,\r\n            CONTENT_MAP.temperature_unit\r\n          ]\r\n        }}\r\n      />\r\n    </VerticalFlexRoundCard>\r\n  );\r\n}","import { ColDiv, CenterTitle } from '../components/appStyleWrappers';\r\nimport { LeftBorderCard, BigGridRoundCard } from '../components/Card';\r\nimport { IconLabeledElement } from '../components/IconElements';\r\nimport { WeatherDisplayReducer } from '../components/StateComponents';\r\n\r\nimport {default as ICON_MAP} from '../datastore/app_icon_map.json'\r\n\r\ninterface ScheduleSectionProps {\r\n  weatherState: WeatherWeekState,\r\n  calendarState: CalendarState,\r\n  display_week: Array<string>\r\n}\r\n\r\nexport default function ScheduleSection(props: ScheduleSectionProps){\r\n  return (\r\n    <>\r\n      {props.display_week.map((day, i)=>\r\n        <BigGridRoundCard\r\n          col='20% 1fr'\r\n          alignItems='stretch'\r\n          key={`schedule_of_day-${i}`}\r\n        >\r\n          <ColDiv>\r\n            <CenterTitle>{day}</CenterTitle>\r\n            <WeatherOfDay\r\n              status={props.weatherState.status}\r\n              item_info={props.weatherState.data.weather_list[i]}\r\n            />\r\n          </ColDiv>\r\n          <EventOfDay\r\n            event_list={props.calendarState.data.event_list[i]}\r\n          />\r\n        </BigGridRoundCard>\r\n      )}\r\n    </>\r\n  );\r\n}\r\ninterface WeatherOfDayProps {\r\n  status: Status,\r\n  item_info: WeatherWeekItemInfo\r\n}\r\nfunction WeatherOfDay(props: WeatherOfDayProps){\r\n  return (\r\n    <ColDiv>\r\n      {['day', 'night'].map((k, i)=>\r\n        <ColDiv key={`weather_of_day-${i}`}>\r\n          {WeatherDisplayReducer[props.status]({\r\n            code: props.item_info[k as keyof WeatherWeekItemInfo].code,\r\n            is_night: k === 'night'\r\n          })}\r\n          {props.item_info[k as keyof WeatherWeekItemInfo].POP}\r\n        </ColDiv>\r\n      )}\r\n    </ColDiv>\r\n  );\r\n}\r\n\r\ninterface EventOfDayProps {\r\n  event_list: Array<EventInfo>\r\n}\r\nfunction EventOfDay(props: EventOfDayProps){\r\n  return (\r\n    <ColDiv\r\n      alignItems='stretch'\r\n    >\r\n      {props.event_list.map((event_info, i)=>\r\n        <SingleEvent\r\n          event_info={event_info}\r\n          key={`day_event-${i}`}\r\n        />\r\n      )}\r\n    </ColDiv>\r\n  );\r\n}\r\n\r\ninterface SingleEventProps {\r\n  event_info: EventInfo\r\n}\r\nfunction SingleEvent(props: SingleEventProps){\r\n  const ViewOnCalendar = () => {\r\n    if (props.event_info.link === ''){\r\n      return;\r\n    }\r\n    window.open(props.event_info.link, \"_blank\");\r\n  }\r\n  return (\r\n    <LeftBorderCard\r\n      onClick={ViewOnCalendar}\r\n    >\r\n      <ColDiv\r\n        alignItems=\"stretch\"\r\n      >\r\n        <h1>{props.event_info.summary}</h1>\r\n        {['duration', 'location'].map((title, i)=>\r\n          <IconLabeledElement\r\n            icon_cls_name={ICON_MAP[title as keyof typeof ICON_MAP]}\r\n            content={props.event_info[title as keyof EventInfo]}\r\n            key={`single_event-${i}`}\r\n          />\r\n        )}\r\n      </ColDiv>\r\n    </LeftBorderCard>\r\n  );\r\n}\r\n","import {\r\n  useState, useRef, MutableRefObject, \r\n  MouseEvent, MouseEventHandler\r\n} from 'react';\r\nimport styled from 'styled-components';\r\nimport {showContentEffect, hideContentEffect} from '../libs/componentEffects';\r\n\r\ninterface SwitchShowController {\r\n  is_hide: boolean,\r\n  switchDisplay: MouseEventHandler,\r\n  stopEvent: MouseEventHandler,\r\n  ref_content: MutableRefObject<null>\r\n}\r\n\r\n/**\r\n * @return SwitchShowController, a object contains following key:\r\n * - is_hide: boolean, the display status of main content, init is true.\r\n * - switchDisplay: MouseEventHandler to controll the visibility of main content.\r\n * - stopEvent: MouseEventHandler to avoid switching display status.\r\n * - ref_content: MutableRefObject<null>, as the ref for the main content.\r\n */\r\nexport function DisplayController(): SwitchShowController {\r\n  const [is_hide, setHide] = useState<boolean>(true);\r\n  const ref_content = useRef(null);\r\n  const switchDisplay = (event: MouseEvent) => {\r\n    stopEvent(event);\r\n    if (is_hide){\r\n      setHide(false);\r\n      showContentEffect(ref_content);\r\n      return;\r\n    }\r\n    hideContentEffect(ref_content);\r\n    setTimeout(()=>{ setHide(true);}, 501);\r\n  }\r\n\r\n  const stopEvent = (event: React.MouseEvent) => {\r\n    // possible to be nested, \r\n    // stop event bubbling / capturing to avoid close all content\r\n    event.preventDefault()\r\n    event.stopPropagation();\r\n    event.nativeEvent.stopImmediatePropagation();\r\n  }\r\n  return {\r\n    is_hide,\r\n    ref_content,\r\n    switchDisplay,\r\n    stopEvent\r\n  };\r\n}\r\n\r\ninterface DynamicContentContainerProps extends ContainerProps {\r\n  hidden: boolean\r\n}\r\n\r\nexport const DynamicContentContainer = styled.div((props: DynamicContentContainerProps)=>`\r\n  ${props.hidden ? '': 'display: contents;'}\r\n`);","import {ReactNode} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { ColDiv } from './appStyleWrappers';\r\nimport { IconCircleButton } from './ButtonComponent';\r\nimport { \r\n  DisplayController,\r\n  DynamicContentContainer\r\n} from './SwitchShowElement';\r\n\r\n\r\ninterface MenuWrapperProps {\r\n  children: ReactNode,\r\n  icon_cls_name: string\r\n}\r\n/**\r\n * @param props includes following keys:\r\n * - content: JSX.Element | string, content to display in menu.\r\n * - icon_cls_name: bootstrap icon classname for switch button.\r\n */\r\nexport function MenuWrapper(props: MenuWrapperProps){\r\n  const {\r\n    is_hide,\r\n    ref_content,\r\n    switchDisplay,\r\n    stopEvent\r\n  } = DisplayController();\r\n\r\n  return (\r\n    <>\r\n      <IconCircleButton\r\n        is_primary={true}\r\n        icon_cls_name={props.icon_cls_name}\r\n        func={switchDisplay}\r\n      />\r\n      <DynamicContentContainer\r\n        hidden={is_hide}\r\n      >\r\n        <MenuBoard\r\n          ref={ref_content}\r\n          onClick={switchDisplay}\r\n        >\r\n          <ContentContainer\r\n            onClick={stopEvent}\r\n          >\r\n            {props.children}\r\n          </ContentContainer>\r\n        </MenuBoard>\r\n      </DynamicContentContainer>\r\n    </>\r\n  ); \r\n}\r\n\r\nconst MenuBoard = styled(ColDiv)`\r\n  background: var(--assistcolor);\r\n  backdrop-filter: blur(var(--gap1));\r\n  position: fixed;\r\n  top: 0px;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  z-index: -1;\r\n`\r\n\r\nconst ContentContainer = styled(ColDiv)`\r\n  max-width: 100vw;\r\n  max-height: 100vh;\r\n  overflow: auto;\r\n`","import {\r\n  useState, useRef, useEffect,\r\n  ChangeEvent,\r\n  MouseEvent, MouseEventHandler,\r\n  ReactNode\r\n} from 'react';\r\n\r\nimport styled, {css} from 'styled-components';\r\nimport {\r\n  CircleCss, CircleSideCss, SmallRoundCss, getVerticalFlexCss,\r\n  GridDiv, RowInGridDiv, RowDiv, ColDiv\r\n} from './appStyleWrappers';\r\nimport { SmallIcon } from './IconElements';\r\nimport { CircleSideButton, IconTitledButton } from './ButtonComponent';\r\nimport { \r\n  DisplayController,\r\n  DynamicContentContainer\r\n} from './SwitchShowElement';\r\n\r\nimport {default as ICON_MAP} from '../datastore/app_icon_map.json';\r\n\r\ninterface MyFormProps {\r\n  children: ReactNode,\r\n  question: string,\r\n  submit_func: MouseEventHandler,\r\n  cancel_func: MouseEventHandler\r\n}\r\nexport function MyForm(props: MyFormProps){\r\n  const {\r\n    is_hide,\r\n    ref_content,\r\n    switchDisplay,\r\n    stopEvent\r\n  } = DisplayController();\r\n\r\n  // if form data is needed for third parties, use following method in form's onSubmit:\r\n  // https://github.com/final-form/react-final-form/issues/878#issuecomment-745364350\r\n  const formRef= useRef<HTMLFormElement>(null);\r\n  const handleSubmit = (event: MouseEvent) => {\r\n    if (! formRef.current){\r\n      return;\r\n    }\r\n    if (formRef.current.reportValidity()){\r\n      props.submit_func(event);\r\n      switchDisplay(event);\r\n    }\r\n  }\r\n  const handleCancel = (event: MouseEvent) => {\r\n    props.cancel_func(event);\r\n    switchDisplay(event);\r\n  }\r\n\r\n  return (\r\n    <ColDiv flexGrow='unset'>\r\n      <CircleSideButton\r\n        content={props.question}\r\n        func={switchDisplay}\r\n      />\r\n      <DynamicContentContainer\r\n        hidden={is_hide}\r\n      >\r\n        <Board\r\n          ref={ref_content}\r\n          onClick={switchDisplay}\r\n        >\r\n          <MyFormWrapper\r\n            ref={formRef}\r\n            onClick={stopEvent}\r\n          >\r\n            {props.children}\r\n            <RowDiv>\r\n              <IconTitledButton\r\n                is_primary={true}\r\n                content=\"確認\"\r\n                icon_cls_name={ICON_MAP.checked}\r\n                func={handleSubmit}\r\n              />\r\n              <IconTitledButton\r\n                content=\"取消\"\r\n                icon_cls_name={ICON_MAP.canceled}\r\n                func={handleCancel}\r\n              />\r\n            </RowDiv>\r\n          </MyFormWrapper>\r\n        </Board>\r\n      </DynamicContentContainer>\r\n    </ColDiv>\r\n  );\r\n}\r\n\r\ninterface PasswordInputComponentProps {\r\n  label: string,\r\n  value: string,\r\n  setValue: (s: string) => any,\r\n  icon_cls_name: string\r\n}\r\nexport function PasswordInputComponent(props: PasswordInputComponentProps){\r\n  const [hidePassword, setHidePassword] = useState<boolean>(true);\r\n  const [msg, setMsg] = useState('');\r\n  const refInput = useRef<HTMLInputElement>(null);\r\n  const handleSwitch = () => {\r\n    setHidePassword(! hidePassword);\r\n  }\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setMsg(event.target.validationMessage);\r\n    props.setValue(event.target.value);\r\n  }\r\n  useEffect(() => {\r\n    if (refInput.current?.validationMessage){\r\n      setMsg(refInput.current?.validationMessage);\r\n    }\r\n  }, [refInput]);\r\n\r\n  const [inputType, statusIcon] = hidePassword ? \r\n    ['password', ICON_MAP.password_is_hide]:\r\n    ['text', ICON_MAP.password_is_show]\r\n  ;\r\n  return (\r\n    <InputSection\r\n      label={props.label}\r\n    >\r\n      <i>{msg}</i>\r\n      <GridDiv>\r\n        <IconContainer\r\n          gridArea='1/1/1/1'\r\n          alignItems='stretch'\r\n          justifyContent='space-between'\r\n        >\r\n          <SmallIcon className={props.icon_cls_name}/>\r\n          <SmallIcon \r\n            className={statusIcon}\r\n            onClick={handleSwitch}\r\n          />\r\n        </IconContainer>\r\n        <RowInGridDiv\r\n          gridArea='1/1/1/1'\r\n          alignItems='stretch'\r\n        >\r\n          <MyInput\r\n            ref={refInput}\r\n            name={props.label}\r\n            value={props.value}\r\n            onChange={handleChange}\r\n            type={inputType}\r\n            required\r\n          />\r\n        </RowInGridDiv>\r\n      </GridDiv>\r\n    </InputSection>\r\n  );\r\n}\r\n\r\ninterface SelectComponentProps {\r\n  label: string,\r\n  option_list: Array<string>,\r\n  value: string,\r\n  setValue: (s: string) => any\r\n}\r\nexport function SelectInputComponent(props: SelectComponentProps){\r\n  return (\r\n    <InputSection\r\n      label={props.label}\r\n    >\r\n      <ColDiv\r\n        justifyContent='stretch'\r\n        alignItems='stretch'\r\n      >\r\n        <HiddenSelectElement\r\n          label={props.label}\r\n          value={props.value}\r\n          option_list={props.option_list}\r\n        />\r\n        <DummySelectElement\r\n          label={props.label}\r\n          value={props.value}\r\n          setValue={props.setValue}\r\n          option_list={props.option_list}\r\n        />\r\n      </ColDiv>\r\n    </InputSection>\r\n  ); \r\n}\r\n\r\ninterface ToggleCheckComponentProps {\r\n  label: string,\r\n  msg_checked: string,\r\n  value: boolean,\r\n  setValue: (bool: boolean) => any\r\n}\r\nexport function ToggleCheckComponent(props: ToggleCheckComponentProps){\r\n  // deal with old bugs of checkbox, radio button. \r\n  // https://github.com/facebook/react/issues/21094\r\n  const handleCheck = (event: ChangeEvent<HTMLInputElement>) => {\r\n    event.preventDefault();\r\n    setTimeout(() => props.setValue(! props.value), 0)\r\n  }\r\n  return (\r\n    <InputSection\r\n      label={props.label}\r\n    >\r\n      <RowDiv>\r\n        <MyCheckBox\r\n          name={props.label}\r\n          type='checkbox'\r\n          value={`${props.value}`}\r\n          checked={props.value}\r\n          onChange={handleCheck}\r\n        />\r\n        {props.msg_checked}\r\n      </RowDiv>\r\n    </InputSection>\r\n  );\r\n}\r\n\r\ninterface InputSectionProps {\r\n  children: ReactNode,\r\n  label: string\r\n}\r\nfunction InputSection(props: InputSectionProps){\r\n  return (\r\n    <MyFieldSet>\r\n      <label htmlFor={props.label}>\r\n        {props.label}\r\n      </label>\r\n        {props.children}\r\n    </MyFieldSet>\r\n  );\r\n}\r\n\r\ninterface HiddenSelectElementProps {\r\n  label: string,\r\n  value: string,\r\n  option_list: Array<string>\r\n}\r\nfunction HiddenSelectElement(props: HiddenSelectElementProps){\r\n  const [msg, setMsg] = useState('');\r\n  const refSelect = useRef<HTMLSelectElement>(null);\r\n\r\n  // unlike input element, here the value is not decided by itself.\r\n  // thus need to 'recover' the msg if value is changed and it's valid;\r\n  useEffect(() => {\r\n    if (! refSelect.current){\r\n      return;\r\n    }\r\n\r\n    refSelect.current.value = props.value;\r\n    if (refSelect.current.reportValidity()){\r\n      setMsg('');\r\n    }\r\n    else {\r\n      refSelect.current.focus();\r\n      setMsg(refSelect.current.validationMessage);\r\n    }\r\n  }, [props.value, refSelect]);\r\n\r\n  return (\r\n    <>\r\n    <i>{msg}</i>\r\n    <HiddenSelect\r\n      ref={refSelect}\r\n      name={props.label}\r\n      value={props.value}\r\n      onChange={()=> {}}\r\n      required={true}\r\n    >\r\n      <option value=''/>\r\n      {props.option_list.map((op, i)=>\r\n        <option value={op} key={`op-${i}`}>\r\n          {op}\r\n        </option>\r\n      )}\r\n    </HiddenSelect>\r\n    </>\r\n  );\r\n}\r\n\r\ninterface DummySelectElementProps {\r\n  label: string,\r\n  value: string,\r\n  setValue: (s: string) => any,\r\n  option_list: Array<string>\r\n}\r\nfunction DummySelectElement(props: DummySelectElementProps){\r\n  const {\r\n    is_hide,\r\n    ref_content,\r\n    switchDisplay,\r\n    stopEvent\r\n  } = DisplayController();\r\n\r\n  const selectItem = (op: string) => {\r\n    return (event: MouseEvent) => {\r\n      switchDisplay(event);\r\n      props.setValue(op);\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n    <DummySelect\r\n      col='var(--iconradius) 1fr var(--iconradius)'\r\n      onClick={switchDisplay}\r\n    >\r\n      <i/>\r\n      {props.value || props.label}\r\n      <SmallIcon className={is_hide ? \r\n        ICON_MAP.extend_content:\r\n        ICON_MAP.fold_content\r\n      }/>\r\n    </DummySelect>\r\n     \r\n    <DynamicContentContainer\r\n      hidden={is_hide}\r\n    >\r\n      <ContentBoard\r\n        ref={ref_content}\r\n        onClick={switchDisplay}\r\n        justifyContent='start'\r\n        alignItems='stretch'\r\n      >\r\n        <GridDiv\r\n          row='auto'\r\n          col='repeat(3, 1fr)'\r\n          onClick={stopEvent}\r\n        >\r\n          {props.option_list.map((op, i)=>\r\n            <CircleSideButton\r\n              content={op}\r\n              func={selectItem(op)}\r\n              is_primary={op === props.value}\r\n              key={`option-${i}`}\r\n            />\r\n          )}\r\n        </GridDiv>\r\n      </ContentBoard>\r\n    </DynamicContentContainer>\r\n  </>\r\n  );\r\n}\r\n\r\nconst FormElementCSS = css`\r\n  background: var(--bgcolor);\r\n  box-shadow: 1px 1px 5px 0px var(--shadowcolor);\r\n`;\r\nconst MyFormWrapper = styled.form`\r\n  max-width: 100vw;\r\n  max-height: 100vh;\r\n  overflow: auto;\r\n`;\r\n\r\nconst MyInput = styled.input`\r\n  ${CircleSideCss}\r\n  ${FormElementCSS}\r\n  padding: 5px calc(var(--iconsize) + 5px);\r\n  display: flex;\r\n  flex-grow: 1;\r\n  border: none;\r\n  outline:none;\r\n  &:focus {\r\n    border: none;\r\n    outline:none;\r\n    background: var(--maincolor1);\r\n  }\r\n`; \r\nconst MyCheckBox = styled.input`\r\n  appearance: none;\r\n  cursor: pointer;\r\n  ${CircleSideCss}\r\n  ${FormElementCSS}\r\n  padding: 5px 0;\r\n  transition-duration: 2s;\r\n  &:checked {\r\n    background: var(--maincolor2);\r\n  }\r\n  &:before, &:after {\r\n    ${CircleCss}\r\n    position: relative;\r\n  }\r\n  &:after {\r\n    content: 'on';\r\n    margin-left: var(--gap1);\r\n  }\r\n  &:before {\r\n    content: 'off';\r\n  }\r\n  &:after, &:checked:before {\r\n    color: transparent;\r\n    background: var(--bgcolor);\r\n    border: 1px solid var(--shadowcolor);\r\n    box-shadow: 1px 1px 5px 0px var(--shadowcolor);\r\n  }\r\n  &:before, &:checked:after {\r\n    color: var(--fontcolor);\r\n    background: none;\r\n    border: none;\r\n    box-shadow: none;\r\n  }\r\n`; \r\nconst DummySelect = styled(GridDiv)`\r\n  ${CircleSideCss}\r\n  ${FormElementCSS}\r\n  cursor: pointer;\r\n  transition-duration: 2s;\r\n  &:hover {\r\n    background: var(--maincolor2);\r\n  }\r\n`;\r\nconst HiddenSelect = styled.select`\r\n  height: 0px;\r\n  width: 0px;\r\n  opacity: 0;\r\n`\r\nconst IconContainer = styled(RowInGridDiv)`\r\n  padding: var(--iconradius);\r\n`\r\nconst ContentBoard = styled(ColDiv)`\r\n  ${SmallRoundCss}\r\n  ${FormElementCSS}\r\n`\r\nconst Board = styled(ColDiv)`\r\n  background: var(--assistcolor);\r\n  backdrop-filter: blur(var(--gap3));\r\n  position: fixed;\r\n  top: 0px;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  z-index: 1;\r\n  & > {\r\n    width: fit-content;\r\n  }\r\n`\r\nconst MyFieldSet = styled.fieldset`\r\n  ${getVerticalFlexCss()}\r\n  margin: var(--gap2) 0;\r\n  border: none;\r\n  &:invalid {\r\n    border-right: var(--gap1) solid var(--maincolor2);\r\n  }\r\n`;","import { useState } from \"react\";\r\nimport { MenuWrapper } from '../components/MenuWrapper';\r\nimport { \r\n  MyForm, \r\n  SelectInputComponent, \r\n  PasswordInputComponent, \r\n  ToggleCheckComponent\r\n} from \"../components/MyFormElements\";\r\n\r\nimport {default as CITY_MAP} from '../datastore/weather_city_map.json';\r\nimport {default as ICON_MAP} from '../datastore/app_icon_map.json';\r\nimport {default as CONTENT_MAP} from '../datastore/app_content_map.json';\r\n\r\ninterface SettingSectionProps {\r\n  weatherParam: WeatherParam | null,\r\n  setWeatherParam: React.Dispatch<React.SetStateAction<WeatherParam | null>>,\r\n  calendarParam: CalendarParam | null,\r\n  setCalendarParam: React.Dispatch<React.SetStateAction<CalendarParam | null>>,\r\n  cur_week: Array<Date>\r\n}\r\n/**\r\n * @param props SettingSectionProps \r\n * - cur_week: Array<Date>\r\n * for weather, calendar state, each contains following properties:\r\n * - param: param | null, null for init only, required info for fetching api.\r\n * - setParam: React.Dispatch<React.SetStateAction> to update param above.\r\n */\r\nexport default function SettingSection(props: SettingSectionProps){\r\n  return (\r\n    <MenuWrapper\r\n      icon_cls_name={ICON_MAP.setting}\r\n    >\r\n      <WeatherParamSetSection\r\n        weatherParam={props.weatherParam}\r\n        setWeatherParam={props.setWeatherParam}\r\n      />\r\n      <CalendarParamSetSection\r\n        calendarParam={props.calendarParam}\r\n        setCalendarParam={props.setCalendarParam}\r\n        cur_week={props.cur_week}\r\n      />\r\n    </MenuWrapper>\r\n  );\r\n}\r\n\r\ninterface WeatherParamSetSectionProps {\r\n  weatherParam: WeatherParam | null\r\n  setWeatherParam: React.Dispatch<React.SetStateAction<WeatherParam | null>>\r\n}\r\nfunction WeatherParamSetSection(props: WeatherParamSetSectionProps){\r\n  const [city, setCity] = useState<string>(props.weatherParam?.city || '');\r\n  const [town, setTown] = useState<string>(props.weatherParam?.town || '');\r\n\r\n  const handleSetCity = (newCity: string) => {\r\n    // remove town if reselect\r\n    setCity(newCity);\r\n    setTown('');\r\n  }\r\n  const handleSubmit = () => {\r\n    props.setWeatherParam({\r\n      city,\r\n      town\r\n    });\r\n  }\r\n  const handelCancel = () => {\r\n    setCity(props.weatherParam?.city || '');\r\n    setTown(props.weatherParam?.town || '');\r\n  }\r\n\r\n  type city_data_key = keyof typeof CITY_MAP.city_data;\r\n\r\n  return ( \r\n    <MyForm\r\n      submit_func={handleSubmit}\r\n      cancel_func={handelCancel}\r\n      question={CONTENT_MAP.setting_weather}\r\n    >\r\n      <SelectInputComponent\r\n        label={CONTENT_MAP.select_city_label}\r\n        value={city}\r\n        setValue={handleSetCity}\r\n        option_list={CITY_MAP.cities}\r\n      />\r\n      <SelectInputComponent\r\n        label={CONTENT_MAP.select_town_label}\r\n        value={town}\r\n        setValue={setTown}\r\n        option_list={\r\n          city !== '' ?\r\n          CITY_MAP.city_data[city as city_data_key].town_list:\r\n          []\r\n        }\r\n      />\r\n    </MyForm>\r\n  );\r\n}\r\n\r\ninterface CalendarParamSetSectionProps {\r\n  calendarParam: CalendarParam | null\r\n  setCalendarParam: React.Dispatch<React.SetStateAction<CalendarParam | null>>,\r\n  cur_week: Array<Date>\r\n}\r\nfunction CalendarParamSetSection(props: CalendarParamSetSectionProps){\r\n  const [api_key, setAPIKey] = useState<string>(props.calendarParam?.api_key || '');\r\n  const [calendar_id, setCalendarID] = useState<string>(props.calendarParam?.calendar_id || '');\r\n  const [use_example_data, setUseEx] = useState<boolean>(props.calendarParam?.use_example_data || true);\r\n  const handleSubmit = () => {\r\n    props.setCalendarParam({\r\n      api_key,\r\n      calendar_id,\r\n      use_example_data,\r\n      time_min: props.cur_week[0].toISOString(),\r\n      time_max: props.cur_week[6].toISOString()\r\n    });\r\n  }\r\n  const handelCancel = () => {\r\n    setAPIKey(props.calendarParam?.api_key || '');\r\n    setCalendarID(props.calendarParam?.calendar_id || '');\r\n    setUseEx(props.calendarParam?.use_example_data || true);\r\n  }\r\n  return ( \r\n    <MyForm\r\n      submit_func={handleSubmit}\r\n      cancel_func={handelCancel}\r\n      question={CONTENT_MAP.setting_calendar}\r\n    >\r\n      <ToggleCheckComponent\r\n        label={CONTENT_MAP.calendar_source_label}\r\n        value={use_example_data}\r\n        setValue={setUseEx}\r\n        msg_checked={CONTENT_MAP.calendar_source_msg_checked}\r\n      />\r\n      {(!use_example_data) && (\r\n        <>\r\n        <PasswordInputComponent\r\n          icon_cls_name={ICON_MAP.calendar_api_key}\r\n          label={CONTENT_MAP.calendar_api_key_label}\r\n          value={api_key}\r\n          setValue={setAPIKey}\r\n        />\r\n        <PasswordInputComponent\r\n          icon_cls_name={ICON_MAP.calendar_id}\r\n          label={CONTENT_MAP.calendar_id_label}\r\n          value={calendar_id}\r\n          setValue={setCalendarID}\r\n        />\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  );\r\n}\r\n","import { useState, useMemo } from 'react';\nimport {\n  getWeather3DayState, getWeatherWeekState, getCalendarState,\n  useTimeState\n} from './service/stateControllers';\n\nimport Weather3DaySection from './sections/Weather3DaySection';\nimport WeatherWeekSection from './sections/WeatherWeekSection';\nimport ScheduleSection from './sections/ScheduleSection';\nimport SettingSection from './sections/SettingSection';\n\nimport './App.css';\nimport './datastore/WeatherIcon/css/weather-icons.min.css';\n\nexport default function App(){\n  const [timeState, refresh] = useTimeState();\n  const [weatherParam, setWeatherParam] = useState<WeatherParam | null>(null);\n\n  const weather3DayState = getWeather3DayState(weatherParam, timeState.cur_week);\n  const weatherWeekState = getWeatherWeekState(weatherParam, timeState.cur_week);\n  \n  const [calendarParam, setCalendarParam] = useState<CalendarParam | null>(null);\n  const calendarState = getCalendarState(calendarParam, timeState.cur_week);\n\n  const Forecast3Day = useMemo(()=> (\n    <Weather3DaySection\n      state={weather3DayState}\n    />\n  ), [weather3DayState]);\n  \n  const ForecastWeek = useMemo(()=> (\n    <WeatherWeekSection\n      display_week={timeState.display_week}\n      state={weatherWeekState}\n    />\n  ), [weatherWeekState, timeState.display_week]);\n\n  const Schedule = useMemo(()=> (\n    <ScheduleSection\n      display_week={timeState.display_week}\n      weatherState={weatherWeekState}\n      calendarState={calendarState}\n    />\n  ), [weatherWeekState, calendarState, timeState.display_week]);\n\n  const Setting = useMemo(()=> (\n    <SettingSection\n      weatherParam={weatherParam}\n      setWeatherParam={setWeatherParam}\n      calendarParam={calendarParam}\n      setCalendarParam={setCalendarParam}\n      cur_week={timeState.cur_week}\n    />\n  ), [weatherParam, calendarParam, timeState.cur_week]);\n  \n  // auto refresh per 3 hrs\n  setInterval(()=> {\n    refresh();\n  }, 60 * 60 * 3 * 1000);\n\n  return (\n    <div className=\"App\">\n      <header id='app-setting'>\n        {Setting}\n      </header>\n      <main id=\"app-main\">\n        <section id=\"app-weather\" className=\"section\">\n          {Forecast3Day}\n          {ForecastWeek}\n        </section>\n        <section id=\"app-schedule\" className=\"section\">\n          {Schedule}\n        </section>\n      </main>\n    </div>\n  );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}